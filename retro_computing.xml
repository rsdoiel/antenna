<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <atom:link href="https://rsdoiel.github.io/antenna/retro_computing.xml" rel="self" type="application/rss+xml" />
  <channel>
    <title>Retro Computing</title>
    <link>https://rsdoiel.github.io/antenna/retro_computing.xml</link>
    <lastBuildDate>12 Sep 25 20:09 -0700</lastBuildDate>
    <generator>antenna/0.0.4</generator>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <item>
      <title>This Week on The Analog Antiquarian</title>
      <link>https://www.filfre.net/2025/09/this-week-on-the-analog-antiquarian/</link>
      <description>
        <![CDATA[Chapter 3: The Book That Some People Read]]>
      </description>
      <guid>cid://https://www.filfre.net/?p=6493</guid>
    </item>    <item>
      <title>Ovation Pro and book publishing – ROUGOL meeting, 15th September</title>
      <link>https://www.riscository.com/2025/ovation-pro-and-publishing-rougol-15th-september/</link>
      <description>
        <![CDATA[The next meeting of the RISC OS User Group of London (ROUGOL) will take place on Monday, 15th September, with Gavin Crawford taking the podium to talk about how he uses Ovation Pro in his publishing business. A graphic artist and designer with over forty years experience in the field of printing and publishing, Gavin started out at his family&#8217;s printing company in the mid-1980s, at which time artwork was hand-drawn. He introduced BBC Micros for admin tasks, later to be replaced by RISC OS machines, and by the mid-1990s&#8230;]]>
      </description>
      <guid>cid://https://www.riscository.com/?p=10705</guid>
    </item>    <item>
      <title>Rougol September 2025 meeting on monday - Publishing with Ovation Pro</title>
      <link>http://www.iconbar.com/comments/rss/news2229.html</link>
      <description>
        <![CDATA[The September 2025 Rougol meeting is on Monday 15th September with guest speaker Gavin Crawford]]>
      </description>
      <guid>cid://http://www.iconbar.com/comments/rss/news2229.html</guid>
    </item>    <item>
      <title>b.log 2025/09/10 - My reserve of happiness, Work until you die, Epic diss track.</title>
      <link>https://heyrick.eu/blog/entry/20250910</link>
      <description>
        <![CDATA[My reserve of happiness, Work until you die, Epic diss track.]]>
      </description>
      <guid>cid://https://heyrick.eu/blog/entry/20250910</guid>
    </item>    <item>
      <title>KDE Linux Alpha Available for Daring Users</title>
      <link>http://www.linux-magazine.com/Online/News/KDE-Linux-Alpha-Available-for-Daring-Users</link>
      <description>
        <![CDATA[<p>It's official, KDE Linux has arrived, but it's not quite ready for prime time.</p>]]>
      </description>
      <author>webdevel@sparkhausmedia.com (Gwen Clark)</author>
      <guid>cid://afb9f4a14b58c96af79f6d7ed352651d</guid>
    </item>    <item>
      <title>AI: Why Generative AI Hallucinates. All the Causes You Should Know</title>
      <link>https://paolozaino.wordpress.com/2025/09/09/ai-why-generative-ai-hallucinates-all-the-causes-you-should-know/</link>
      <description>
        <![CDATA[Large language models can produce text that looks fluent and convincing but turns out to be wrong; a problem known as hallucination. These errors are not random glitches: they stem from how AI systems are trained, the data they learn from, the way we evaluate them, and even how people interact with them. In this [&#8230;]]]>
      </description>
      <guid>cid://http://paolozaino.wordpress.com/?p=9596</guid>
    </item>    <item>
      <title>NetMount client 1.5.0 and server 1.5.0</title>
      <link>https://sourceforge.net/p/freedos/news/2025/09/netmount-client-150-and-server-150/</link>
      <description>
        <![CDATA[<div class="markdown_content"><p>If you need to transfer data between DOS and another system, here's another option: NetMount enables DOS systems to access shared directories from remote machines as if they were local drives. <strong>netmount</strong> on DOS talks to <strong>netmount-server</strong> on a server. Jaroslav Rohel recently released server 1.5.0 with "..optimizations and new features. Probably the biggest news is that support for storing DOS attributes has been added for more operating systems. It’s now supported on Linux, FreeBSD, and Windows .. DOS attributes can now be stored using either native file system support or extended attributes. This means that DOS attributes can be stored even on file systems that don’t support them natively, as long as extended attributes are available." Find <a class="" href="https://github.com/jrohel/NetMount/releases/tag/client-v1.5.0%2Cserver-v1.5.0" rel="nofollow">client 1.5.0 and server 1.5.0</a> at GitHub.</p></div>]]>
      </description>
      <guid>cid://https://sourceforge.net51d1fd59ba7640de1eaa5314415bf860748c1d01</guid>
    </item>    <item>
      <title>b.log 2025/09/08 - Weekend, Block EVERYTHING!, My multimeters.</title>
      <link>https://heyrick.eu/blog/entry/20250908</link>
      <description>
        <![CDATA[Weekend, Block EVERYTHING!, My multimeters.]]>
      </description>
      <guid>cid://https://heyrick.eu/blog/entry/20250908</guid>
    </item>    <item>
      <title>AMD Initiates Graphics Driver Updates for Linux Kernel 6.18</title>
      <link>http://www.linux-magazine.com/Online/News/AMD-Initiates-Graphics-Driver-Updates-for-Linux-Kernel-6.18</link>
      <description>
        <![CDATA[<p>This new AMD update focuses on power management, display handling, and hardware support for Radeon GPUs.</p>]]>
      </description>
      <author>webdevel@sparkhausmedia.com (Gwen Clark)</author>
      <guid>cid://8c8894adfce339bc4e8179bd49634bb9</guid>
    </item>    <item>
      <title>Web2PDF adds interactive help in version 1.01</title>
      <link>https://www.riscository.com/2025/web2pdf-01/</link>
      <description>
        <![CDATA[An update has been released by Kevin Wells to one of his newest applications, Web2PDF. The purpose of the software is to convert web pages to PDF files, which can then be opened by any PDF reader you have available. It does this by sending the address of the page, using Wget, to a remote application programmer interface (API) provided by API Layer for the purpose, called Web Page to PDF. The API then feeds back a PDF file which shows the contents of the web page, which can either&#8230;]]>
      </description>
      <guid>cid://https://www.riscository.com/?p=10702</guid>
    </item>    <item>
      <title>KIM-1 connectors: beware the Chinese cheap variants!</title>
      <link>http://retro.hansotten.nl/kim-1-connectors-beware-the-chinese-cheap-variants/</link>
      <description>
        <![CDATA[The KIM-1 needs 2 edge connectors. The specifications are: card edge; PIN: 44; 3.96mm When you search for those, the cheap ones pop up, Chinese made, look good. But they are no good, when you slide them one you need a lot of force, some even use a hammer! The PCB is too thick for [&#8230;]]]>
      </description>
      <guid>cid://http://retro.hansotten.nl/?p=18786</guid>
    </item>    <item>
      <title>Microsoft 6502 BASIC</title>
      <link>https://sourceforge.net/p/freedos/news/2025/09/microsoft-6502-basic/</link>
      <description>
        <![CDATA[<div class="markdown_content"><p>It's not DOS, but it's good to see Microsoft re-release some of its classic products under an open source license. Recently, Microsoft released the source code for 6502 BASIC. From <a class="" href="https://opensource.microsoft.com/blog/2025/09/03/microsoft-open-source-historic-6502-basic/" rel="nofollow">the announcement</a>: "Microsoft BASIC began in 1975 as the company’s very first product: a BASIC interpreter for the Intel 8080, written by Bill Gates and Paul Allen for the Altair 8800. That codebase was soon adapted to run on other 8-bit CPUs .. The 6502 port was completed in 1976 by Bill Gates and Ric Weiland. In 1977, Commodore licensed it ... a deal that placed Microsoft BASIC at the heart of Commodore’s PET computers and, later, the VIC-20 and Commodore 64."</p>
        <p>If you're curious: yes, this is the same source code that became Applesoft BASIC on the Apple II computers. And that's very interesting to me, because I learned BASIC on an Apple II. - Also check out this video from our YouTube channel, showing how to draw the "Sierpinski Triangle" by <a class="" href="https://www.youtube.com/watch?v=cxolyi7yUaM" rel="nofollow">programming in Applesoft BASIC</a></p></div>]]>
      </description>
      <guid>cid://https://sourceforge.net815904b2664ebb27959ad3f9d93f9f3a52201a58</guid>
    </item>    <item>
      <title>MPXplay 1.68</title>
      <link>https://sourceforge.net/p/freedos/news/2025/09/mpxplay-168/</link>
      <description>
        <![CDATA[<div class="markdown_content"><p>Mpxplay is a commander-style console audio player for DOS and Win32 operating systems, developed in OpenWatcom C v1.9. DOS console audio player versions also support - native soundcard handling (for the latest PCI audio chips too) - LCD-display handling - LFN (long filenames) support (with DOSLFN).  Version 1.68 was just released in August. This is mostly an update, no major features to announce for DOS. You can download it from the <a class="" href="https://mpxplay.sourceforge.net/" rel="nofollow">Mpxplay website</a>.</p></div>]]>
      </description>
      <guid>cid://https://sourceforge.nete4847e908cba4541fcaeef9649755e618a0ec1f9</guid>
    </item>    <item>
      <title>Choose Your Own Adventure</title>
      <link>https://www.filfre.net/2025/09/choose-your-own-adventure/</link>
      <description>
        <![CDATA[In 1999, after twenty years and many tens of millions of books sold,[1]A truly incredible figure of 250 million copies sold is frequently cited for the original Choose Your Own Adventure series today, apparently on the basis of a statement released in January of 2007 by Choosco, a company which has repeatedly attempted to reboot [&#8230;]]]>
      </description>
      <guid>cid://https://www.filfre.net/?p=6462</guid>
    </item>    <item>
      <title>Microsoft’s 6502 BASIC is now Open Source</title>
      <link>http://retro.hansotten.nl/microsofts-6502-basic-is-now-open-source/</link>
      <description>
        <![CDATA[Microsoft’s 6502 BASIC is now Open Source, and that includes KB9 or as it is officially called: MOS TECH 6502 BASIC V1.1 COPYRIGHT 1977 BY MICROSOFT Microsoft’s 6502 BASIC is now Open Source &#8220;Now, for the first time, this influential 6502 version is truly yours to explore, modify, and share.&#8221; This means that we are [&#8230;]]]>
      </description>
      <guid>cid://http://retro.hansotten.nl/?p=18769</guid>
    </item>    <item>
      <title>Magazines: Compute! and Compute II</title>
      <link>http://retro.hansotten.nl/magazines-compute-and-compute-ii/</link>
      <description>
        <![CDATA[The pages om Magazines had an update. MICRO has its own page with all Best of MICRO pfds. Compute! and Compute II articles have been highlighted. A special page devoted to a small program called Dungeons And Dragons Dice Simulator, with source and demo See also:KIM-1 connectors: beware the Chinese cheap variants!The KIM-1 needs 2 [&#8230;]]]>
      </description>
      <guid>cid://http://retro.hansotten.nl/?p=18767</guid>
    </item>    <item>
      <title>WROCC September 2025 meeting - Chris Johns  talks Filecore and Block devices</title>
      <link>http://www.iconbar.com/comments/rss/news2234.html</link>
      <description>
        <![CDATA[Wakefield's September speaker was Chris Johns diving into the depths of RISC OS filing systems.]]>
      </description>
      <guid>cid://http://www.iconbar.com/comments/rss/news2234.html</guid>
    </item>    <item>
      <title>Microsoft makes 6502 BASIC open source</title>
      <link>https://oldvcr.blogspot.com/2025/09/microsoft-makes-6502-basic-open-source.html</link>
      <description>
        <![CDATA[It was probably going to happen sooner or later, but Microsoft has <a href="https://opensource.microsoft.com/blog/2025/09/03/microsoft-open-source-historic-6502-basic/">officially released the source code for 6502 BASIC</a>. The specific revision is very Commodore-centric: it's the 1977 "8K" BASIC variant "1.1," which Commodore users know better as BASIC V2.0, the same BASIC used in the early PET and with later spot changes from Commodore (including removing Bill Gates' <a href="https://www.pagetable.com/?p=43#comment-1033">famous Easter egg</a>) in the VIC-20 and Commodore 64. I put "8K" in quotes because the 40-bit Microsoft Binary Format version, which is most familiar as the native floating point format for most 8-bit BASICs derived from Microsoft's and all Commodore BASICs from the PET on up, actually starts at 9K in size. In the C64, because there is RAM and I/O between the BASIC ROM and the Kernal ROM, there is an extra <tt>JMP</tt> at the end of the BASIC ROM to continue to the routine in the lowest portions of the Kernal ROM. The jump doesn't exist in the VIC-20 where the ROM is contiguous and as a result everything past that point is shifted by three bytes on the C64, the length of the instruction.
        <p>
        This is, of course, the same BASIC that Gates wanted a percentage of but Jack Tramiel famously refused to budge on the $25,000 one-time fee, claiming "I'm already married." Gates yielded to Tramiel, as most people did then, but I suspect the slight was never forgotten. Not until the 128 did Microsoft officially appear in the credits for Commodore BASIC, and then likely only as a way to push its bona fides as a low-end business computer. Microsoft's source release also includes changes from Commodore's own John Feagans, who rewrote the garbage collection routine, and was the original developer of the Commodore Kernal <a href="/2025/06/see-jane-128-by-arktronics-run.html">and later Magic Desk</a>.
        <p>
        The source code is all in <a href="https://github.com/microsoft/BASIC-M6502/blob/main/m6502.asm">one big file</a> (typical for the time) and supports <a href="https://github.com/microsoft/BASIC-M6502/blob/main/m6502.asm#L10">six machine models</a>, the first most likely a vapourware 6502 system never finished by Canadian company Semi-Tech Microelectronics (<tt>STM</tt>) better known for the CP/M-based Pied Piper, then the Apple II, the Commodore (in this case PET 2001), the Ohio Scientific (OSI) Challenger, <a href="/search/label/kim-1">the Commodore/MOS KIM-1</a>, and most intriguingly a PDP-10-based simulator written by Paul Allen. The source code, in fact, was cross-assembled on a PDP-10 using MACRO-10, and when assembled for the PDP-10 emulator it actually emits a PDP-10 executable that traps on every instruction into the simulator linked with it &mdash; an interesting way of effectively accomplishing threaded code. A similar setup was used for their 8080 emulator. Unfortunately, I don't believe Allen's code has been released anywhere, though I'd love to be proven wrong if people know otherwise. Note that they presently don't even mention the STM port in <a href="https://github.com/microsoft/BASIC-M6502">the Github README</a>, possibly because no one was sure what it did. 
        <p>
        While MACRO-10 source for 6502 BASIC has circulated before and been analysed in detail, <a href="https://www.pagetable.com/?p=774">most notably by Michael Steil</a>, this is nevertheless the first official release where it is truly open-source <a href="https://github.com/microsoft/BASIC-M6502/blob/main/LICENSE">under the MIT license</a> and Microsoft should be commended for doing so. This also makes it much easier to pull a BASIC up for your own 6502 homebrew system &mdash; there's nothing like the original.]]>
      </description>
      <author>noreply@blogger.com (ClassicHasClass)</author>
      <guid>cid://tag:blogger.com,1999:blog-8349470052336612452.post-8532990611546474567</guid>
    </item>    <item>
      <title>AerynOS Alpha Release Available</title>
      <link>http://www.linux-magazine.com/Online/News/AerynOS-Alpha-Release-Available</link>
      <description>
        <![CDATA[<p>With a choice of several desktop environments, AerynOS 2025.08 is almost ready to be your next operating system.</p>]]>
      </description>
      <author>webdevel@sparkhausmedia.com (Gwen Clark)</author>
      <guid>cid://fad6ef8fa6a379f393a038f0aaed6db8</guid>
    </item>    <item>
      <title>Vorstellung: The 6502 50th Anniversary Computer Badge (1975-2025)</title>
      <link>http://retro.hansotten.nl/vorstellung-the-6502-50th-anniversary-computer-badge-1975-2025/</link>
      <description>
        <![CDATA[The 6502 50th Anniversary Computer Badge (1975-2025), variant of Lee Hart&#8217;s 6502 badge, to celebrate the 6502 birthday. On the German forum64.de #50birthday6502 See also:KIM-1 connectors: beware the Chinese cheap variants!The KIM-1 needs 2 edge connectors. The specifications are: card edge; PIN: 44; 3.96mm When you search for those, ...Magazines: Compute! and Compute IIThe pages [&#8230;]]]>
      </description>
      <guid>cid://http://retro.hansotten.nl/?p=18660</guid>
    </item>    <item>
      <title>WROCC September 2025 talk on Wednesday - Chris Johns</title>
      <link>http://www.iconbar.com/comments/rss/news2231.html</link>
      <description>
        <![CDATA[The September 2025 WROCC talk is on Wednesday 3rd September and starts at at 7.45pm on Zoom.]]>
      </description>
      <guid>cid://http://www.iconbar.com/comments/rss/news2231.html</guid>
    </item>    <item>
      <title>b.log 2025/08/31 - No final vide grenier, Managing your Livebox with LiveboxMonitor, ls colours, Cassette player repair.</title>
      <link>https://heyrick.eu/blog/entry/20250831</link>
      <description>
        <![CDATA[No final vide grenier, Managing your Livebox with LiveboxMonitor, ls colours, Cassette player repair.]]>
      </description>
      <guid>cid://https://heyrick.eu/blog/entry/20250831</guid>
    </item>    <item>
      <title>b.log 2025/08/30 - The final Letterbox and a problem, Governmental failure, Fixing democracy, Thoughts and prayers, One Core Two Core Red Core Blue Core.</title>
      <link>https://heyrick.eu/blog/entry/20250830</link>
      <description>
        <![CDATA[The final Letterbox and a problem, Governmental failure, Fixing democracy, Thoughts and prayers, One Core Two Core Red Core Blue Core.]]>
      </description>
      <guid>cid://https://heyrick.eu/blog/entry/20250830</guid>
    </item>    <item>
      <title>Dutch ABUG event – 3rd to 5th October</title>
      <link>https://www.riscository.com/2025/dutch-abug-event-3rd-5th-october/</link>
      <description>
        <![CDATA[There will be an Acorn and BBC User Group (ABUG) event taking place in the Netherlands later this year &#8211; the Dutch ABUG 2025, co-sponsored by The Big Ben Club, which will be held from Friday 3rd to Sunday 5th of October at: MFC de Kiekmure,Tesselchadelaan 1,3842 GA Harderwilk,The Netherlands. Anyone who has an interest in the full range of Acorn and related machines (of any native &#8216;bit&#8217; size) can come along, whether that&#8217;s one, two, or all three days &#8211; though it will be necessary to book ahead. Details&#8230;]]>
      </description>
      <guid>cid://https://www.riscository.com/?p=10698</guid>
    </item>    <item>
      <title>WROCC presents a ‘Storage Symposium’ – 3rd September</title>
      <link>https://www.riscository.com/2025/wrocc-storage-symposium-3rd-september/</link>
      <description>
        <![CDATA[The Wakefield RISC OS Computer Club (WROCC) will be holding their next meeting on Wednesday, 3rd September, with a two-part talk from Chis Johns on the subject of RISC OS file storage. In part one, Chris will look at Filecore, the standard format used by RISC OS systems, with an explanation of how it all works, and for the second part he will be looking at the BlockDevices system, an attempt to &#8216;modernise and modularise&#8217; disc access, covering why it was created, and how it works. The start time for&#8230;]]>
      </description>
      <guid>cid://https://www.riscository.com/?p=10696</guid>
    </item>    <item>
      <title>August 2025 News Summary</title>
      <link>http://www.iconbar.com/comments/rss/news2224.html</link>
      <description>
        <![CDATA[Some things we noticed this month. What did you see?]]>
      </description>
      <guid>cid://http://www.iconbar.com/comments/rss/news2224.html</guid>
    </item>    <item>
      <title>AUR Repository Still Under DDoS Attack</title>
      <link>http://www.linux-magazine.com/Online/News/AUR-Repository-Still-Under-DDoS-Attack</link>
      <description>
        <![CDATA[<p>Arch User Repository continues to be under a DDoS attack that has been going on for more than two weeks.</p>]]>
      </description>
      <author>webdevel@sparkhausmedia.com (Gwen Clark)</author>
      <guid>cid://9bf947d3de710b313b5420e0717b010a</guid>
    </item>    <item>
      <title>January 2026, the 50th birthday of the KIM-1</title>
      <link>http://retro.hansotten.nl/january-2026-the-50th-birthday-of-the-kim-1/</link>
      <description>
        <![CDATA[n 1975 MOS Technology started delivery of 65XX ICs. So 2025 marks the 50 year anniversary of the 6502! The earliest mentions of the KIM-1 are from January 1976. The date of the first edition of the User Manual, and first mentions in e.g. Byte. So I propose to declare January 2026 as the 50th [&#8230;]]]>
      </description>
      <guid>cid://http://retro.hansotten.nl/?p=18593</guid>
    </item>    <item>
      <title>How to use the time in the 6530/6532</title>
      <link>http://retro.hansotten.nl/how-to-use-the-time-in-the-6530-6532/</link>
      <description>
        <![CDATA[When I acquired a KIM-1 Rev A, obviously sold by NCE/Compumart, it came with some documentation that may interest any programmer working with the MOS Technology (R)RIOT 6530 and 6532. The timer description the datasheet is a bit vague about how to use. What may help is the document &#8216;KIM-1 Application Note 2 Interval Timer [&#8230;]]]>
      </description>
      <guid>cid://http://retro.hansotten.nl/?p=18591</guid>
    </item>    <item>
      <title>PLEASE package The Computerist</title>
      <link>http://retro.hansotten.nl/please-package-the-computerist/</link>
      <description>
        <![CDATA[PLEASE is a very small package for a standard KIM-1. It has a tiny monitor, command interpreter and many handy subroutines. PLEASE INSTRUCTIONS PLEASE LISTING See also:KIM-1 connectors: beware the Chinese cheap variants!The KIM-1 needs 2 edge connectors. The specifications are: card edge; PIN: 44; 3.96mm When you search for those, ...Magazines: Compute! and Compute [&#8230;]]]>
      </description>
      <guid>cid://http://retro.hansotten.nl/?p=18589</guid>
    </item>    <item>
      <title>A small book with five experiments with the KIM-1</title>
      <link>http://retro.hansotten.nl/a-small-book-with-five-experiments-with-the-kim-1/</link>
      <description>
        <![CDATA[A small book with five experiments with the KIM-1. 1. User 2. Input/output 3. I/O controller 4. Timing 5. Hardware interrupts KIM-1 experiments) See also:KIM-1 connectors: beware the Chinese cheap variants!The KIM-1 needs 2 edge connectors. The specifications are: card edge; PIN: 44; 3.96mm When you search for those, ...Magazines: Compute! and Compute IIThe pages [&#8230;]]]>
      </description>
      <guid>cid://http://retro.hansotten.nl/?p=18587</guid>
    </item>    <item>
      <title>MOS Technology KIM-1 Preliminary datasheet 1976</title>
      <link>http://retro.hansotten.nl/mos-technology-kim-1-preliminary-datasheet-1976/</link>
      <description>
        <![CDATA[With one of my KIM-1s (a Rev G) came a MOS Technology KIM-1 Preliminary datasheet 1976. Added to the KIM-1 manuals page. See also:KIM-1 connectors: beware the Chinese cheap variants!The KIM-1 needs 2 edge connectors. The specifications are: card edge; PIN: 44; 3.96mm When you search for those, ...Magazines: Compute! and Compute IIThe pages om [&#8230;]]]>
      </description>
      <guid>cid://http://retro.hansotten.nl/?p=18582</guid>
    </item>    <item>
      <title>RingReaper Malware Poses Danger to Linux Systems</title>
      <link>http://www.linux-magazine.com/Online/News/RingReaper-Malware-Poses-Danger-to-Linux-Systems</link>
      <description>
        <![CDATA[<p>A new kind of malware exploits modern Linux kernels for I/O operations.</p>]]>
      </description>
      <author>webdevel@sparkhausmedia.com (Gwen Clark)</author>
      <guid>cid://53323089f32fcfc6f78296e77777f481</guid>
    </item>    <item>
      <title>Happy Birthday, Linux</title>
      <link>http://www.linux-magazine.com/Online/News/Happy-Birthday-Linux</link>
      <description>
        <![CDATA[<p>On August 25, Linux officially turns 34.</p>]]>
      </description>
      <author>webdevel@sparkhausmedia.com (Gwen Clark)</author>
      <guid>cid://33dcf3d2a6d469c8ce01d72ec05de193</guid>
    </item>    <item>
      <title>b.log 2025/08/24 - The end is nigh!, Satellite woes, Letterbox, And also..., Barn swallows.</title>
      <link>https://heyrick.eu/blog/entry/20250824</link>
      <description>
        <![CDATA[The end is nigh!, Satellite woes, Letterbox, And also..., Barn swallows.]]>
      </description>
      <guid>cid://https://heyrick.eu/blog/entry/20250824</guid>
    </item>    <item>
      <title>Cherry Bomb revisited in BBC BASIC</title>
      <link>https://www.riscository.com/2025/cherry-bomb-bbc-basic/</link>
      <description>
        <![CDATA[A couple of years ago, Jeroen Vermeulen ported Cherry Bomb to RISC OS, a shoot &#8217;em up &#8211; aka a &#8216;shmup&#8217; according to its original developer, Krystian Majewski &#8211; in which you control a ship at the bottom of the screen, and shoot down the incoming waves of alien attackers. The original game was developed as part of a tutorial series on a YouTube channel called Lazy Devs Academy, operated by Krystian, and Jeroen&#8217;s aim was to learn from those tutorials. He initially brought Cherry Bomb to RISC OS using&#8230;]]>
      </description>
      <guid>cid://https://www.riscository.com/?p=10692</guid>
    </item>    <item>
      <title>Reverse-engineering Roadsearch Plus, or, roadgeeking with an 8-bit CPU</title>
      <link>https://oldvcr.blogspot.com/2025/08/make-your-apple-ii-or-commodore-64.html</link>
      <description>
        <![CDATA[<div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhu9sCeFq1XKHJUzJx30ugOl-3qy6PKjWQ9Go1Sq_xOtkxdEWkWxJlhbHI75ykdkQmGILFDAMEh1q5vghTxIorSZktTbf2_L897xKr-6hEo27tGadIf0kbFQso9tfsszYUvKdpgDB-BvPfjpPb_HfeV7ya79VRyTsf17qYWJZtyLVmRbrd_8mQ5eYag82Y/s3360/Screenshot%202025-07-20%20at%202.54.59%E2%80%AFPM.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="2100" data-original-width="3360" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhu9sCeFq1XKHJUzJx30ugOl-3qy6PKjWQ9Go1Sq_xOtkxdEWkWxJlhbHI75ykdkQmGILFDAMEh1q5vghTxIorSZktTbf2_L897xKr-6hEo27tGadIf0kbFQso9tfsszYUvKdpgDB-BvPfjpPb_HfeV7ya79VRyTsf17qYWJZtyLVmRbrd_8mQ5eYag82Y/s320/Screenshot%202025-07-20%20at%202.54.59%E2%80%AFPM.png"/></a></div>
        
        Sorry, Doc Brown: we still needed roads in 1985. That meant paper atlases and misfolded roadmaps and a lot of stereotypical male anxiety asking for directions. Fortunately, in 1985, this problem also had a solution.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhI3qTDehageVTTVbo2KoDlvFs5260oAyCSeEltwFUUQqsUBqoKgvBPrPoOTS3hmivd-3fbbUAQMqMtQHBRboTkyGc74k6HU_sFFroBW7KVR68z-NWptxED352ukPBi-_LJpKyT07vgzcnlGDAFi5HhXhHimhqrVtkS_IOLYQE5VlbnNUFg8IJUoDJg-Yg/s4080/PXL_20250725_204908005.jpg" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhI3qTDehageVTTVbo2KoDlvFs5260oAyCSeEltwFUUQqsUBqoKgvBPrPoOTS3hmivd-3fbbUAQMqMtQHBRboTkyGc74k6HU_sFFroBW7KVR68z-NWptxED352ukPBi-_LJpKyT07vgzcnlGDAFi5HhXhHimhqrVtkS_IOLYQE5VlbnNUFg8IJUoDJg-Yg/s320/PXL_20250725_204908005.jpg"/></a></div>
        
        Yes, if your car inverter could handle a 45-ish watt load &mdash; and your wife doesn't want her seat back right away &mdash; you could navigate major routes across America on your home computer like this portable Commodore SX-64. I particularly enjoyed writing this article because my <em>other</em> irredeemably nerdy habit is roadgeeking, exploring and mapping highways both old and new, and it turns out that 8-bit roadgeeking on ordinary home computers was absolutely possible.
        <p>
        For computers of this class, devising an optimal highway route becomes an exercise not only in how to encode sufficient map data to a floppy disk, but also performing efficient graph traversal with limited hardware. Today we'll explore Roadsearch-Plus, one of the (if not the) earliest such software &mdash; primarily on the Commodore 64, but originating on the Apple II &mdash; and at the end "drive" all the way from southern California to British Columbia along US Highway 395, my first long haul expedition, but as it was in 1985. Buckle up while we crack the program's runtime library, extract its database, and (working code included) dive deeply into the quickest ways to go from A to B using a contemporary home computer.
        <p>
        <a name='more'></a>
        <p>
        Although this article assumes a little bit of familiarity with the United States highway system, I'll provide a 30-second version. The top-tier national highway network is the 1956 <i>Eisenhower Interstate System</i> (abbreviated I-, such as I-95), named for president Dwight D. Eisenhower who promulgated it, signed with red, white and blue shields. Nearly all of its alignments, which is to say the physical roads composing it, are grade-separated full freeway. It has come to eclipse the 1926 <i>United States Numbered Highway System</i> (abbreviated US, such as US 395), a nationally-numbered grid system of highways maintained by the states, albeit frequently with federal funding. Signed using a horned white shield, these roads vary from two-lane highway all the way to full freeway and may be multiplexed (i.e., multiply signed) with other US highways or Interstates in many areas. While they are no longer the highest class of U.S. national road, they nevertheless remain very important for regional links especially in those areas that Interstates don't service. States and counties maintain their own locally allocated highway systems in parallel. <a href="http://www.floodgap.com/roadgap/conventions.html">Here is a glossary</a> of these and other roadgeek terms.
        <p>
        Geographic information systems (GIS) started appearing in the 1960s, after Waldo Tobler's 1959 "Automation and Cartography" paper about his experience with the military Semi-Autographic Ground Environment system. SAGE OA-1008 displays relied on map transparencies developed manually but printed with computers like the IBM 704. Initially such systems contained only geographic features like terrain and coastlines and specific points of interest, but support for highways as a layer or integral component was rapidly implemented for land use applications, and such support became part of most, if not all, mainframe and minicomputer GIS systems by the late 1970s. However, these systems generally only handled highways as one of many resource or entity types; rarely were there specific means of using them for navigational purposes.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjz89gf5h3oNGrFPNZd7JccGbFnDFUz16eN9xYUv9_404s14Jfmbww_UQzDJyk6JY91LKPyT28jp9jZwOS_oSCW53nH4JwV3OX8a-R96pBQK7seS8LQ7uVKcnGDp6-itOTa_lLMvNHM2bvG6R8WDFTFgvqjEDApRDaqDrmwCe4l6FS01lk7YBIqHcF-W-s/s2200/electrogyro.jpg" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="1142" data-original-width="2200" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjz89gf5h3oNGrFPNZd7JccGbFnDFUz16eN9xYUv9_404s14Jfmbww_UQzDJyk6JY91LKPyT28jp9jZwOS_oSCW53nH4JwV3OX8a-R96pBQK7seS8LQ7uVKcnGDp6-itOTa_lLMvNHM2bvG6R8WDFTFgvqjEDApRDaqDrmwCe4l6FS01lk7YBIqHcF-W-s/s320/electrogyro.jpg"/></a></div>
        
        Quite possibly the first consumer-level computer for highway navigation was the 1981 <a href="https://global.honda/en/about/history-digest/75years-history/chapter3/section2_4/">Honda Electro-Gyrocator</a>. Because Global Positioning System (GPS) satellite data was not then available for civilian applications and other radio navigational systems like LoRAN were hard to reliably receive in canyons or tunnels, it relied on its own internal gas gyroscope to detect rotation and movement aided by a servo in the car's transmission. The Electro-Gyrocator used a Texas Instruments TMS9980 (a derivative of the 16-bit TMS9900 in the TI-99/4A but with an 8-bit data bus) as its CPU and a sidecar TMS9901 for I/O.<!-- Wikipedia "16 bit computer microprocessor (8 bit external bus)" plus 9901 in https://ieeemilestones.ethw.org/Milestone-Proposal:Honda_Electro_Gyrocator:_The_World%27s_First_Map-based_Automotive_Navigation_System,_1981 --> It had 10K of ROM, 1K of SRAM and 16K of DRAM, hopeless for storing map data of any consequence, so the actual maps were transparencies too; the 9980 integrated sensor data provided by the 9901 from the gyroscope and servo to plot the car's course on a small 6" CRT behind the map overlay. The user was expected to set the starting location on the map before driving and there was likewise no provision for routing. It was only made available that year for &yen;300,000 (about US$2900 in 2025 dollars at current exchange rates) on the JDM Honda Accord and Honda Vigor, and discontinued by 1982.
        <p>
        There were also a few early roadgeek-oriented computer and console games, which I distinguish from more typical circuit or cross-country racers by an attempt to base them on real (not fictional) roads with actual geography. One I remember vividly was Imagic's <i>Truckin'</i>, a Mattel Intellivision-exclusive game from 1983 which we played on <a href="/2024/12/composite-and-hard-reset-mods-for.html">our Tandyvision One</a>.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisi0RX_T_3lZS7bpv8IrZ28Q8-Vg-y50xQwRwMcD3C32F_JFowmVSUhMigIC-PR2JATOjlVeQhid4FKb02ag2QucLfKUnc1VkFd9Groyk3KXa58E7Hie4AvmuffqANKCy5ap4nteQqZbiKUAjTHpugfs2J0DQu7jXiBNVCNSXHCNJhbCamVHPsnICsFeY/s4080/PXL_20250723_032908134~2.jpg" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisi0RX_T_3lZS7bpv8IrZ28Q8-Vg-y50xQwRwMcD3C32F_JFowmVSUhMigIC-PR2JATOjlVeQhid4FKb02ag2QucLfKUnc1VkFd9Groyk3KXa58E7Hie4AvmuffqANKCy5ap4nteQqZbiKUAjTHpugfs2J0DQu7jXiBNVCNSXHCNJhbCamVHPsnICsFeY/s320/PXL_20250723_032908134~2.jpg"/></a></div>
        
        To the best I can determine, Truckin' is the first fully-fledged truck simulator game, using real-life highways and locations that are in general more accurate than not. It predates CRL's <a href="https://spectrumcomputing.co.uk/entry/2650/ZX-Spectrum/Juggernaut">Juggernaut</a> for the ZX Spectrum by at least two years, and Juggernaut uses a completely fictitious game world instead.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgMiFdrnmVpuH1NHm70DpdlhyphenhyphennlvifjIolXojmkV9nS5smqdS-mTh_ypaslHKaU1AEwdvYkebt7NlXfrohXmJgA4xWdibmbLjhHEaRENMHhpfXzqpG59SBb1pnDUc-xpbV0TtLaiY0kjBtcbubH1UHYdDiq5XGTP3P5tDauIC-OMFGl8N9umyH5WabCmaI/s3360/Screenshot%202025-07-20%20at%202.18.00%E2%80%AFPM.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="2100" data-original-width="3360" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgMiFdrnmVpuH1NHm70DpdlhyphenhyphennlvifjIolXojmkV9nS5smqdS-mTh_ypaslHKaU1AEwdvYkebt7NlXfrohXmJgA4xWdibmbLjhHEaRENMHhpfXzqpG59SBb1pnDUc-xpbV0TtLaiY0kjBtcbubH1UHYdDiq5XGTP3P5tDauIC-OMFGl8N9umyH5WabCmaI/s320/Screenshot%202025-07-20%20at%202.18.00%E2%80%AFPM.png"/></a></div>
        
        Gameplay has you driving across much of North America while managing your load, fuel and speed. It features changing weather and highway conditions, intermittent brushes with the fuzz, and a bit of white knuckles dodging other truckers who inevitably swerve all over the road. The game displays your position as a combination of highway number and a two-letter city code with a list of specific routes. While these routes were fixed, the game does no navigation either &mdash; because <em>you're</em> expected to do that!
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiMcV0ZAIvieW5FFhAX-gqVuvFTf37dHgRa5zng2HegLWejbKhUC7dy1CFg7asPVTuDOXvthWcaqGbS212ihy0JdGqA4Vb2rdKzatr_D_A_XHeujFLn-CqQPpQdQHXjHFpvgd4GeNWvRkJftOk2re3DcvFo9TniyZceb9IX4UuJnPN6k7JS9EbDoSrbpSg/s2500/truckin.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="1933" data-original-width="2500" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiMcV0ZAIvieW5FFhAX-gqVuvFTf37dHgRa5zng2HegLWejbKhUC7dy1CFg7asPVTuDOXvthWcaqGbS212ihy0JdGqA4Vb2rdKzatr_D_A_XHeujFLn-CqQPpQdQHXjHFpvgd4GeNWvRkJftOk2re3DcvFo9TniyZceb9IX4UuJnPN6k7JS9EbDoSrbpSg/s320/truckin.png"/></a></div>
        
        Truckin's map database is rather noteworthy even considering the deliberate geographic liberties taken to fit it and the rest of the game into 16K of ROM. In the Truckin' universe, Interstates are the only highways except for US 101 on the extreme Pacific coast (appearing as "Interstate 01"), a single "Highway 1" in Canada as a composite of the southern Trans-Canada Highway (and continuous with US 1 in Maine), and an undocumented California State Route 9 as part of <a href="https://www.digitpress.com/eastereggs/intvtruckin.htm">an easter egg</a>. Besides very terse prompts and a heavily compressed internal routing table, the game makes all highway numbers unique and has no multiplexes or three-digit auxiliary Interstates, and while you can drive into Canada you can't drive into Mexico (admittedly it was pre-NAFTA). Additionally, for gameplay reasons every highway junction is a named "city," introducing irregularities like Interstate 70 ending in Provo, UT when it really ends about 130 miles south, or Interstate 15 ending in El Cajon, CA, and many cities and various two-digit primary Interstates are simply not included (e.g., I-12, I-19, I-30, I-85, I-93, etc.). As a result of these constraints, among other inaccuracies Interstate 90 terminates in Madison, WI at I-94 (not Boston), I-94 terminates in Milwaukee at I-55 (not Port Huron, MI), and I-40 is extended west from its true terminus in Barstow, CA along real-world California State Highway 58 to intersect I-5 "in Bakersfield" (real Interstate 5 is around twenty miles away). Still, it contains an extensive network of real highways with their lengths and control cities, managing it all on an early console platform with limited memory, while simultaneously supporting full 1983-level gameplay.
        <p>
        The 8-bit home computer was ascendant during the same time and at least one company perceived a market for computer-computed routes with vacations and business trips. I can't find any references to an earlier software package of this kind for this class of computer, at least in the United States, so we'll call it the first.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiAREVwtq1vGMd8a0v1_bZC3K0naY7M_vhgTrjjV3WUaBu2YAMiW5fW9Lo6Ei7HRZEi6d7_TckB2Wb3FJ162roZeXaLDygRiOlLUcVtOP5UIs2zIrRARab7TxusdF1g4KnXZnKCc6THhD2nivzayGCl19GKq82lPe_TS1xbLWUgAjip9u9UJmDKgcVwjks/s1722/columbad.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="1084" data-original-width="1722" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiAREVwtq1vGMd8a0v1_bZC3K0naY7M_vhgTrjjV3WUaBu2YAMiW5fW9Lo6Ei7HRZEi6d7_TckB2Wb3FJ162roZeXaLDygRiOlLUcVtOP5UIs2zIrRARab7TxusdF1g4KnXZnKCc6THhD2nivzayGCl19GKq82lPe_TS1xbLWUgAjip9u9UJmDKgcVwjks/s320/columbad.png"/></a></div>
        
        Columbia Software, based out of Columbia, Maryland, seems to have sold exactly one title, namely this one: Roadsearch. It ran out of a private residence which I've chosen to censor from this actual ad (the house still exists), and while no credits appear in either the Apple II or Commodore 64 version, the name was probably a d/b/a for John Pandelides who was the likely author and is listed as Columbia Software's contact in <i>The Software Writer's Marketplace</i> from 1984. If this is the same person, he later appears in a 2001 document as the Ground and Mission Systems Manager at the NASA Goddard Space Flight Center in Greenbelt, Maryland, about a half hour's drive away. Columbia Software does not appear in any magazines prior to 1982 nor does it appear after 1985, though no business record under that name is known to either the state of Maryland or the state of Delaware.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiH-HpuSjCb2qZcqp42ydjb1mWWpREFIPiG8xpdTN0NXmgf3xp7_nsj1Az64UTbOYLqZLhmgvaP7l9doZpQDhPKsRw9pTJ_OnAv64uoHrtNiTeOjvSKsE_aQbKLGZHj6oJmWRrQ0MirluWxbnbnMGW4irvDtI27YBRRV42KqlAQ6bU3Mx9JO6YIWh74Vfg/s1160/big-rsa2.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="808" data-original-width="1160" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiH-HpuSjCb2qZcqp42ydjb1mWWpREFIPiG8xpdTN0NXmgf3xp7_nsj1Az64UTbOYLqZLhmgvaP7l9doZpQDhPKsRw9pTJ_OnAv64uoHrtNiTeOjvSKsE_aQbKLGZHj6oJmWRrQ0MirluWxbnbnMGW4irvDtI27YBRRV42KqlAQ6bU3Mx9JO6YIWh74Vfg/s320/big-rsa2.png"/></a></div>
        
        The Apple II version boasted 406 cities and road junctions and roughly 70,000 road miles, shown on a static high-resolution map as the program loaded. The connecting roads were primarily Interstates but also included many major US highways and some state routes, although not all routes appeared in their entirety. There were also a smattering of Canadian cities and routes yet no Alaskan ones despite the fact you can absolutely drive to Alaska through Canada (see, for example, the Alaska Highway). On the other hand, it makes sense there weren't any Hawai'ian or Puerto Rican ones.
        <p>
        The version we have here is the "basic" version of Roadsearch that simply used that database for $34.95 [about $118 in 2025 dollars], but there was also an enhanced version called Roadsearch-Plus that could add an additional fifty user-defined junction points and roads between them for $74.95 [$250]. Although we're going to spend most of our time with the 1985 Commodore 64 version because it has both a larger and more current map along with the Plus database editor, the 1982 Apple II version's design informs the C64 port, so we'll take the earlier iteration apart a bit first for analysis.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiB7EpGj8Qfx0YZKzBUDtLrlroy4PwF0Nq4wSCO0YqNcJMd0R0ahZTJEp8YsBmWGmVn6PKXFSsX3CacI274AT87Pf2lkPCbdE9g7RNL_KaADjqNt3BanqnPAH9LCezARaA7D5fPMMvVNqJNou4FANg_sQIyZzD6G59GJjLgkfN61D7mvwd3yt0PU3WxB-M/s1160/big-rsa2menu.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="808" data-original-width="1160" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiB7EpGj8Qfx0YZKzBUDtLrlroy4PwF0Nq4wSCO0YqNcJMd0R0ahZTJEp8YsBmWGmVn6PKXFSsX3CacI274AT87Pf2lkPCbdE9g7RNL_KaADjqNt3BanqnPAH9LCezARaA7D5fPMMvVNqJNou4FANg_sQIyZzD6G59GJjLgkfN61D7mvwd3yt0PU3WxB-M/s320/big-rsa2menu.png"/></a></div>
        
        The basic functionality between both ports was roughly equivalent: given a starting point among its database of cities and junctions, you could either manually walk the available roads from point to point until you reached your destination, or let the computer figure it out. Should there be specific roads you wished to avoid (e.g., tolled, known to be closed, bad weather conditions, etc.), you could provide a list to the program and it would duly ignore them while constructing the itinerary. If you provided a target speed and/or fuel economy level, it would additionally estimate the elapsed time and fuel usage based on miles driven. Even in the lower-tiered version it was possible to modify the on-disk map by altering the distances between junction points, presumably to account for highway rerouting, though you couldn't add any new roads or waypoints except in the "plus" version.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjA2fVCuB96OozUg1rIwWvJ51kjA423PZckEzOZPSnz7T97lXekfsp3BJTq_X_ecn9-HjQ141Xa_FV7su-sLxCQCEEjFcjswbHwzhMSosp3QZ0CX0MDJ9zuZN26U2mEUXahQD3b04BoHS35FeDRPglQxpVrhwtwU0KI9amm0bLwe9D8lAKxVMeINwJSvYA/s1160/big-rsa2-comput2.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="808" data-original-width="1160" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjA2fVCuB96OozUg1rIwWvJ51kjA423PZckEzOZPSnz7T97lXekfsp3BJTq_X_ecn9-HjQ141Xa_FV7su-sLxCQCEEjFcjswbHwzhMSosp3QZ0CX0MDJ9zuZN26U2mEUXahQD3b04BoHS35FeDRPglQxpVrhwtwU0KI9amm0bLwe9D8lAKxVMeINwJSvYA/s320/big-rsa2-comput2.png"/></a></div>
        
        If you chose to have the computer do the walking, there would be a minute or two or twenty of computation and then the automatically determined route was presented to you in summary format. Cities and waypoints could be searched for, or, if you knew the number, you could just enter the number directly. You could also naturally print it out for the car, though there was no option to save a generated routing for later. The program would remember the target speed and fuel economy and save them for future runs.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg5UYxyumV7zgwAfzTp-fDcOeXg9l_5vki8hlV8klIui1NcxCeSyxlnXqYrylE0jWV9wTQOGz2QQU52kOCIwqC-5rP9DLRGCcBvmNozUk28c4pN3HfMbUkZY7w0Ri5nJ3ZrAk7ozUqFoQwXTCxM2uAbXcIu9GiFgPduPA5wP8_KfRsfkwnivH7Ycqbt10U/s1160/big-rsa2cat.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="808" data-original-width="1160" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg5UYxyumV7zgwAfzTp-fDcOeXg9l_5vki8hlV8klIui1NcxCeSyxlnXqYrylE0jWV9wTQOGz2QQU52kOCIwqC-5rP9DLRGCcBvmNozUk28c4pN3HfMbUkZY7w0Ri5nJ3ZrAk7ozUqFoQwXTCxM2uAbXcIu9GiFgPduPA5wP8_KfRsfkwnivH7Ycqbt10U/s320/big-rsa2cat.png"/></a></div>
        
        The disk catalogue suggests that we're dealing with a compiled Applesoft BASIC program based on the suspiciously-named files <tt>T%()</tt>, <tt>N%()</tt> and <tt>B%()</tt> which sound like Applesoft BASIC integer arrays. (The file <tt>MPH</tt> just contains the MPG and MPH targets in text.) In fact, there are actually two compiled programs present, <tt>ROADSEARCH</tt> (the main executable) and <tt>DBA</tt> (the distance editor), and using these "variable" files allows both programs to keep the memory image of the arrays, no doubt the representation of its map database, consistent between them. You can start either compiled program by <tt>BRUN</tt>ning them, as <tt>HELLO</tt> does.
        <p>
        Exactly <em>which</em> compiler we can also make a fairly educated guess about: there were only a few practical choices in 1981-82 when it was probably written, and most of them we can immediately eliminate due to what they (don't) support or what they (don't) generate. For example, being almost certainly Applesoft BASIC would obviously eliminate any Integer BASIC compiler. It also can't be On-Line Systems' Expediter II because that generates "Applesoft BASIC" programs with a single <tt>CALL</tt> statement instead of binaries that are <tt>BRUN</tt>, and it probably isn't Southwestern Data Systems' Speed Star because of the apparent length of the program and that particular compiler's limited capacity.
        <p>
        That leaves the two major compilers of this era, Microsoft's TASC ("The Applesoft Compiler"), which was famously <a href="https://devblogs.microsoft.com/oldnewthing/20220419-00/?p=106496">compiled with itself</a>, and Hayden Book Company's Applesoft Compiler. TASC uses a separate runtime that must be <tt>BLOAD</tt>ed before <tt>BRUN</tt>ning the main executable, which <tt>HELLO</tt> doesn't do. Hayden's compiler is thus the most likely tool, and this theory is buoyed by the fact that this compiler does support variable sharing between modules.
        <p>
        If we run <tt>strings</tt> on the DOS 3.3 <tt>.dsk</tt> image, we see things like
        <p>
        <div class="tx"><pre>
        S(Y/N)?ENTER PRINTER SLOT NUMBER PLEASE TURN PRINTER ONPR#ROUTE (40 COL
        UMN)!  ELAPSEDTIME ! MI.  TIME---- !---- -----MI)TO-*******************
        ********!***********HIT ANY KEY TO CONTINUEHIT ANY KEY FOR OUTPUT MENUD
        ETAILED ROUTE BY COLUMBIA SOFTWARE*********OPEN ROADS,L12READ ROADS,RCL
        OSE ROADS HAS BEEN DELETEDCOMPUTINGMILES TRAVELED 0000PLEASE BE PATIENT
        OUTPUT MENU&lt;1&gt; PRINT/LIST ROUTE SUMMARY&lt;2&gt; PRINT/LIST ROUTE(40 COLUMN)&lt;
        3&gt; PRINT DETAILED ROUTE(80 COLUMN)&lt;4&gt; CHANGE &lt;5&gt; START OVERDO YOU WISH 
        TO PRINT RESULT
        [...]
         HRS:MINAVERAGE SPEED--VEHICLE MPG----TOTAL GALLONS-- GAL.------------!
         -------------------!-------------!----------------!---------------!NOT
         ENTERED PROPERLY. PLEASE TRY AGAIN
        ----------------------------------------------------OPEN ROADMAP CITIES
        ,L19READ ROADMAP CITIES,RCLOSE ROADMAP CITIESFORMATS:CITY NO. &lt;RETURN&gt;C
        ITY NAME STATE &lt;RETURN&gt;&lt;RETURN&gt; (TO CONTINUE)OK(Y/N)? FROM-----------TO
        -------------TOTAL DISTANCE-TOTAL TIME-----**************************! 
        ELAPSED     !   REMAINING   !     ROAD    !    TO (CITY)      !MI  TIME
        GAL ! MI   TIME  GAL !MI    TIME  GAL!ELAPSED MILES--CURRENT CITY---ENT
        ER CONNECTING CITY: TAKE ROAD   MI.     CONNECTING CITY----------   ---
        ----------
        [...]
        O CONTINUE)IS AN ILLEGAL NUMBER. PLEASE CHECK THE  FORMATHAS NOT BEEN M
        ATCHED.CHECK THE FORMAT AND OR THE LISTOK(Y/N)? 
         )B 
        B%(),A30733,L5448 TAKE ROAD   MI.     CONNECTING CITY----------   --- -
        -------------------------------------------------------------OPEN ROADM
        AP CITIES,L19READ ROADMAP CITIES,RCLOSE ROADMAP CITIESFORMATS:CITY NO. 
        &lt;RETURN&gt;CITY NAME STATE &lt;RETURN&gt;&lt;RETURN&gt; (TOVERYOUR CHOICE:NOT ENTERED 
        PROPERLY. TRY AGAINRUN HELLO====================ENTER CITY #1FROM -ENTE
        R CONNECTING CITYNOT CONNECTED BY ROAD. TRY AGAINOPEN ROADS,L12READ ROA
        DS,RCLOSE ROADSROAD---------FROM---------TO-----------DISTANCE-----NEW 
        DISTANCE=BSAVE 
        L#5BLOAD B%(),A30733OPEN T%()READ T%()CLOSE T%()CHANGE DATABASE========
        =======THIS SUBROUTINE ALTERS THE CONTENTS OF  YOUR ROADSEARCH DISK. PL
        EASE PROCEED    CAUTIOUSLY.THESE ARE YOUR OPTIONS&lt;1&gt; CHANGE ROAD DISTAN
        CE&lt;2&gt; SAVE CHANGES TO DISK&lt;3&gt; START 
        [...]
        </pre></div>
        <p>
        Accounting for the fact that the disk interleave will not necessarily put lines in sequential order, you can pick out the strings of the program as well as a number of DOS 3.3 file manager commands, sometimes in pieces, such as <tt>B%(),A30733,L5448</tt> which is probably part of a <tt>BSAVE</tt> command, or <tt>BLOAD B%(),A30733</tt>. The disk also has examples of both kinds of DOS 3.3 text files, both sequentially accessed (such as <tt>OPEN T%()</tt>, <tt>READ T%()</tt> and <tt>CLOSE T%()</tt>) but also the less commonly encountered random access (with explicitly specified record numbers and lengths such as <tt>OPEN ROADS,L12</tt> and <tt>OPEN ROADMAP CITIES,L19</tt>, then <tt>READ ROADS,R</tt> and <tt>READ ROADMAP CITIES,R</tt> which would be followed by the record number).
        <p>
        For these random access files, given a record length and record number, the DOS track-and-sector list is walked to where that record would be and only the necessary sector(s) are read to construct and return the record. We can see the contents with a quick Perl one-liner to strip off the high bit and feeding that to <tt>strings</tt>:
        <p>
        <div class="tx"><pre>
        % perl -e 'eval "use bytes";$/=\1;while(&lt;&gt;){print pack("C",unpack("C",$_)&amp;127);}' roadsearch.dsk | strings
        [...]
        PHOENIX AZ
        PIERRE SD
        PITTSBURGH PA
        PLATTSBURG NY
        POCATELLO ID
        PORT HURON MI
        PORTLAND ME
        PORTLAND OR
        PORTSMOUTH NH
        PRATT KS
        PROVIDENCE RI
        PUEBLO CO
        QUEBEC PQ
        [...]
        JCT US89/UT14 UT
        JCT US93/I15ST NJ
        JCT I25/US20 WY
        JCT I26/I95 SC
        JCT I35/US20 IA
        JCT I40/I81 TN
        JCT I5/CA152 CA
        JCT I5/CA99 CA
        JCT I5/I580 CA
        JCT I57/I24 IL
        [...]
        </pre></div>
        <p>
        Again note that the order is affected by the disk interleave, but the file is stored alphabetically (we'll extract this file properly in a moment). Another interesting string I found this way was "<tt>TIABSRAB WS AIBMULOC</tt>" which is <tt>COLUMBIA SW BARSBAIT</tt> backwards. Perhaps someone can explain this reference.
        <p>
        In a hex editor the city database looks like this, where you can see the regularly repeating 19-byte record format for the names. Remember that the characters are stored with the high bit set.
        <p>
        <div class="tx"><pre>
        000044a0  ce a0 ce d9 8d 00 00 00  00 00 cd c9 cc c5 d3 a0  |................|
        000044b0  c3 c9 d4 d9 a0 cd d4 8d  00 00 00 00 00 cd c9 cc  |................|
        000044c0  d4 cf ce a0 d0 c1 8d 00  00 00 00 00 00 00 00 00  |................|
        000044d0  cd c9 cc d7 c1 d5 cb c5  c5 a0 d7 c9 8d 00 00 00  |................|
        000044e0  00 00 00 cd c9 ce ce c5  c1 d0 cf cc c9 d3 a0 cd  |................|
        000044f0  ce 8d 00 00 00 00 cd c9  ce cf d4 a0 ce c4 8d 00  |................|
        00004500  00 00 00 00 00 00 00 00  cc c9 d4 d4 cc c5 a0 d2  |................|
        00004510  cf c3 cb a0 c1 d2 8d 00  00 00 00 cc c9 d4 d4 cc  |................|
        00004520  c5 d4 cf ce a0 ce c8 8d  00 00 00 00 00 00 cc cf  |................|
        00004530  ce c4 cf ce a0 cf ce 8d  00 00 00 00 00 00 00 00  |................|
        00004540  00 cc cf d2 c4 d3 c2 d5  d2 c7 a0 ce cd 8d 00 00  |................|
        00004550  00 00 00 00 cc cf d3 a0  c1 ce c7 c5 cc c5 d3 a0  |................|
        00004560  c3 c1 8d 00 00 00 00 cc  cf d3 d4 a0 c8 c9 cc cc  |................|
        00004570  d3 a0 c3 c1 8d 00 00 00  00 00 cc cf d5 c9 d3 d6  |................|
        00004580  c9 cc cc c5 a0 cb d9 8d  00 00 00 00 00 cc d5 c2  |................|
        </pre></div>
        <p>
        This is not a very efficient means of storage especially considering DOS 3.3 only had 124K free per disk side (after DOS itself and filesystem overhead), but it would be a lot easier for an Applesoft BASIC program to handle since the record lookup work could be shunted off to DOS 3.3 and performed quickly. Also, while you can list the cities and junctions from the menu, they are not indexed by state, only by first letter:
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEie1IBOqC2bvhe4JkyqhE4GPSAvZvyfVTrjQeoT_-QDKri6mayVY0zMxAVJa45LEggfCFVJsKqlwum07xy3QYMTvOrFEYUTFkYHm1ESEoxoJ9lPYHzaSmrJwXoIvHj1jWNnx7xqlMJewbJm69HZdV5gjZ_RWdpMD5DWCsVSnULCP7gd_5V005vCU7g6kH0/s1160/big-rsa2jct.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="808" data-original-width="1160" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEie1IBOqC2bvhe4JkyqhE4GPSAvZvyfVTrjQeoT_-QDKri6mayVY0zMxAVJa45LEggfCFVJsKqlwum07xy3QYMTvOrFEYUTFkYHm1ESEoxoJ9lPYHzaSmrJwXoIvHj1jWNnx7xqlMJewbJm69HZdV5gjZ_RWdpMD5DWCsVSnULCP7gd_5V005vCU7g6kH0/s320/big-rsa2jct.png"/></a></div>
        
        We extract the list of cities in Virtual ][ by dumping <tt>ROADMAP CITIES</tt> to the emulator's virtual printer. We know its record length because it was stored as a string in the compiled BASIC text we scanned previously. That, in turn, gives us a text file we can read on the Mac side. It is, as expected, 406 lines long. The same process gets us the <tt>ROADS</tt> list, which is 171 lines long. Keep in mind that's just a list of the <em>names</em> of the roads; it does not contain information on the actual highway segments between points.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3B7h-AJApFBJ0R9VVm7ZhQgWlfpDd2htf6SecsrFVxe-0u-ZL5kJWlJd-6yxGYtEuDtGEQ2U13DuA-AHH3VyCTEaI9lrKQxRULuupv4SOpV4Cnq1aTT_ZLwnKig_sS483LG1q5nKHPb-iS8B1R4CN1wtIwEHBbTdB9qDppsskm5wKg5Me3NZGFpUkvmU/s1160/big-rsa2-dump.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="808" data-original-width="1160" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3B7h-AJApFBJ0R9VVm7ZhQgWlfpDd2htf6SecsrFVxe-0u-ZL5kJWlJd-6yxGYtEuDtGEQ2U13DuA-AHH3VyCTEaI9lrKQxRULuupv4SOpV4Cnq1aTT_ZLwnKig_sS483LG1q5nKHPb-iS8B1R4CN1wtIwEHBbTdB9qDppsskm5wKg5Me3NZGFpUkvmU/s320/big-rsa2-dump.png"/></a></div>
        
        However, the city list doesn't actually contain the index for the first letter. Instead, the index is in the only array that is stored as a text file (i.e., <tt>T%()</tt>), where for each letter index 1-26, the value is the first record number for all cities starting with that letter. As we saw previously, the cities are already sorted on disk to facilitate. There are no cities starting with Z, so that letter just goes to the end of the file (non-existent record 407) and terminates.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhS5Yc4KwPcIJAfVeWnFVWHop0s7k_thBQn6YdbR3PoG9s_t3hvjujWRrVgGhlloFuqyWzTCElHe-uxfohx40a4Qu8ANz81-dMVLVD794j3qqklyi0TxhzjVzD5tDe-S6_oh2l_U7EY6QttZPRc19DFjMe6w8cMXNESyM1dA3gHpFwM-45XGSXZ3HgChWs/s1160/big-rsa2-tarr.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="808" data-original-width="1160" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhS5Yc4KwPcIJAfVeWnFVWHop0s7k_thBQn6YdbR3PoG9s_t3hvjujWRrVgGhlloFuqyWzTCElHe-uxfohx40a4Qu8ANz81-dMVLVD794j3qqklyi0TxhzjVzD5tDe-S6_oh2l_U7EY6QttZPRc19DFjMe6w8cMXNESyM1dA3gHpFwM-45XGSXZ3HgChWs/s320/big-rsa2-tarr.png"/></a></div>
        
        This design choice makes it a bit more difficult to browse locations geographically, although at least entering J gets you all the junctions. I don't know, and no article says, how the database was constructed. However, the most likely explanation is that they sat down with a road atlas and labouriously typed it all in, as there wouldn't have been much alternative. Unfortunately the code strings in the compiled BASIC program don't give us enough obvious information to derive the dimensions or purpose of <tt>B%()</tt> and <tt>N%()</tt>, but we'll solve that problem a little later on.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhFUOmbQnXdWg_hx8T2pi3pG5BRK2vSLgItXoJE8JtKNi7FltgnsxBiVV-MKi5ag_V3zlbi-PJU526CduA0blo-9PQZtRBQlo1FpQTZl3zhY6hI1jhyphenhyphenlWo-LM4QRZRwfjGEbgMhB0dDMFcuP-TagCeaqSgRhtzqqgYMhT1ygMU2ON24pjarK4XCrsl9LdI/s1917/computegazette.jpg" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" height="320" data-original-height="1917" data-original-width="1434" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhFUOmbQnXdWg_hx8T2pi3pG5BRK2vSLgItXoJE8JtKNi7FltgnsxBiVV-MKi5ag_V3zlbi-PJU526CduA0blo-9PQZtRBQlo1FpQTZl3zhY6hI1jhyphenhyphenlWo-LM4QRZRwfjGEbgMhB0dDMFcuP-TagCeaqSgRhtzqqgYMhT1ygMU2ON24pjarK4XCrsl9LdI/s320/computegazette.jpg"/></a></div>
        
        In the interim the Commodore 64 came out and rapidly became the most popular home computer in North America (and a lot of other places). As Commodore BASIC 2.0 and Applesoft BASIC are both derived from Microsoft BASIC, the main program and the map editor could be ported with few changes; the only major change appears to have been to the data file format. The initial 1984 release used the same 1982 database from the Apple II with the same 406 cities and junctions, after which a second version came out in 1985 with an expanded 487-point database<!-- corrected --> and updated routing information. However, this release appears to be specific to the Commodore port &mdash; if there were a 1985 map update for the Apple II, it has yet to surface &mdash; and I can find no subsequent release of Roadsearch after 1985 on any platform.
        <p>
        Both C64 versions came in the same Roadsearch and Roadsearch-Plus variants for the same prices, so the iteration we'll explore here is Roadsearch-Plus with the presumed final 1985 database. For purposes of emulation we'll use VICE's SuperCPU spin with the 65816 enabled as some number crunching is involved, but I also tested it on my real Commodore SX-64 and 128DCR for veracity. (Running <tt>xscpu64</tt> in warp mode will absolutely tear through any routing task, but I strongly recommend setting location 650 to 64 in the VICE monitor to disable key repeat.) It's worth noting that the various circulating 1541 disk images of the 1984 and 1985 editions were modified to add entries by their previous owners, though we'll point out how these can be detected and reversed. For much of this article I'll be running a 1985 disk that I manually cleared in a hex editor to what I believe was its original contents.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhYThHRwSMXkzI0S1HNSy8xtIyxNzjZf9QITynTpcLU7H1lIKfhyphenhyphenRPQCzsQQhYlxupaPXXqSOvcvGRGYaqeeAt0JGaAvxm0oaetobBoG5vK3Ohp_zJChY18wnxQSZ5UKyfVxKEU25mwIg9_DLWpBVyajSyXERACTt6HqaKrHzSccRzBklqjAhOPct47B5o/s1152/big-vice-screen-2025080422355396.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhYThHRwSMXkzI0S1HNSy8xtIyxNzjZf9QITynTpcLU7H1lIKfhyphenhyphenRPQCzsQQhYlxupaPXXqSOvcvGRGYaqeeAt0JGaAvxm0oaetobBoG5vK3Ohp_zJChY18wnxQSZ5UKyfVxKEU25mwIg9_DLWpBVyajSyXERACTt6HqaKrHzSccRzBklqjAhOPct47B5o/s320/big-vice-screen-2025080422355396.png"/></a></div>
        
        Although it's not copy-protected, or even write-protected, the disk comes with a(n easily forged) serial number and there are some irregularities which might be there as obfuscation. The Commodore version introduced a new simpler menu where cities could now be displayed by state (though this wasn't indexed, requiring a walk through the entire city file each time) and the connection listing option was removed, since you'd get that anyway by trying to manually construct a route. This is the "plus" release, so the option for making changes to map distances moved to the editor, where you could also show cities, roads and connections directly. We'll get to the editor later on.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkNGwTykVBd4KoM3tzgmSN29lt4WREp1jdisXqD62O4bCAEGGyMVA4SfMwLdyBa2YCR6BjCeDpdOx_kF9UCUtmkY99UeLcGcWPtY_g1VNx-DKqrgaEW-BtulDtFKJcvK411Gkd5XoiG9fQh5WkwnRj-oyxP15pcRhQRgZ4CWIl3d8ZxMF05TbZMH1GFvo/s1152/big-vice-screen-2025081422173021.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkNGwTykVBd4KoM3tzgmSN29lt4WREp1jdisXqD62O4bCAEGGyMVA4SfMwLdyBa2YCR6BjCeDpdOx_kF9UCUtmkY99UeLcGcWPtY_g1VNx-DKqrgaEW-BtulDtFKJcvK411Gkd5XoiG9fQh5WkwnRj-oyxP15pcRhQRgZ4CWIl3d8ZxMF05TbZMH1GFvo/s320/big-vice-screen-2025081422173021.png"/></a></div>
        
        Otherwise this version works much the same and generates the same routes as the Apple II version did, so they are undoubtedly using the same pathfinding algorithm. The speeds are also roughly comparable, which probably says more about the compilers than the computers (an NTSC 64 would be around the same speed as an Apple II, about ~1.02MHz). We'll get to what I think it's doing when we start dissecting the main program.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEggCI0G4FSpRsFHsTmMUO7C_8BaOHggUnwJcaJc2JhiVLITafJnv2M6GcH6fopme07Kd4v_l8cjeZJaEcT8bRcqj8M878jy5_8tcLlg6uf9uPU50y8Fz6INjWLhKCYYLe6E1I2H3g_ERUr0cXBa8cXE16-RYv_HdfW1thfB1V0RNGC2z4-8FS1QH4DlT4I/s1152/big-vice-screen-2025081514550633.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEggCI0G4FSpRsFHsTmMUO7C_8BaOHggUnwJcaJc2JhiVLITafJnv2M6GcH6fopme07Kd4v_l8cjeZJaEcT8bRcqj8M878jy5_8tcLlg6uf9uPU50y8Fz6INjWLhKCYYLe6E1I2H3g_ERUr0cXBa8cXE16-RYv_HdfW1thfB1V0RNGC2z4-8FS1QH4DlT4I/s320/big-vice-screen-2025081514550633.png"/></a></div>
        
        At least three versions of the Commodore 64 version presently circulate: two from 1984 and one from 1985. This is the directory listing for the later 1984 version, showing the main program (<tt>ROADSEARCH+</tt>), the editor (<tt>IDBA</tt>) and two RELative files for the <tt>CITIES</tt> and <tt>ROADS</tt>. RELative files are functionally equivalent to DOS 3.3 random access files, being a record-based file format with a fixed size and an index (made up of "side sectors"). They are an uncommon sight on commercial software due to their idiosyncracies and <a href="https://www.lyonlabs.org/commodore/onrequest/rel-file-bugs.txt">a few outright bugs</a>, and they don't work well for binary data or support variable record sizes which is why Berkeley Softworks came up with VLIR for GEOS instead. On the other hand, they do just fine for text strings and the lookup can be very fast. The cities file looks like this when dumping the raw sectors from the <tt>.d64</tt> disk image:
        <p>
        <div class="tx"><pre>
        000103e0  00 00 84 13 00 43 49 54  49 45 53 a0 a0 a0 a0 a0  |.....CITIES.....|
        000103f0  a0 a0 a0 a0 a0 13 0a 1f  00 00 00 00 00 00 5e 00  |..............^.|
        
        00017800  13 0b ff 00 00 00 00 00  00 00 00 00 00 00 41 42  |..............AB|
        00017810  49 4c 49 4e 45 20 54 58  0d 00 00 00 00 00 00 00  |ILINE TX........|
        00017820  00 ff 00 00 00 00 00 00  00 00 00 00 00 41 4b 52  |.............AKR|
        00017830  4f 4e 20 4f 48 0d 00 00  00 00 00 00 00 00 00 00  |ON OH...........|
        00017840  ff 00 00 00 00 00 00 00  00 00 00 00 41 4c 42 41  |............ALBA|
        00017850  4e 59 20 4e 59 0d 00 00  00 00 00 00 00 00 00 ff  |NY NY...........|
        00017860  00 00 00 00 00 00 00 00  00 00 00 41 4c 42 45 52  |...........ALBER|
        00017870  54 20 4c 45 41 20 4d 4e  0d 00 00 00 00 00 ff 00  |T LEA MN........|
        00017880  00 00 00 00 00 00 00 00  00 00 41 4c 42 55 51 55  |..........ALBUQU|
        00017890  45 52 51 55 45 20 4e 4d  0d 00 00 00 00 ff 00 00  |ERQUE NM........|
        </pre></div>
        <p>
        The directory entry indicates a file with 31-byte records, the first side sector at track 19 sector 10 and the first data sector (shown in part below) at track 19 sector 0. Other than the obvious typo in Abilene, TX, it is the same basic format as the Apple version and also sorted, ending each string with a carriage return. As a method of what I assume prevents trivially dumping its contents, a naive read of each record won't yield anything useful because every record starts with an $ff and a whole bunch of nulls, which Commodore DOS interprets as the end. The actual string doesn't start until offset 12. The same basic idea holds for the roads file:
        <p>
        <div class="tx"><pre>
        00016900  00 ff 84 17 09 52 4f 41  44 53 a0 a0 a0 a0 a0 a0  |.....ROADS......|
        00016910  a0 a0 a0 a0 a0 18 00 18  00 00 00 00 00 00 1f 00  |................|
        
        0001cd00  18 01 ff 00 00 00 00 00  00 00 00 00 00 00 41 42  |..............AB|
        0001cd10  20 33 0d 00 00 00 00 00  00 00 ff 00 00 00 00 00  | 3..............|
        0001cd20  00 00 00 00 00 00 41 42  20 34 0d 00 00 00 00 00  |......AB 4......|
        0001cd30  00 00 ff 00 00 00 00 00  00 00 00 00 00 00 41 42  |..............AB|
        0001cd40  33 2f 41 42 32 0d 00 00  00 00 ff 00 00 00 00 00  |3/AB2...........|
        0001cd50  00 00 00 00 00 00 41 4c  20 31 38 36 0d 00 00 00  |......AL 186....|
        0001cd60  00 00 ff 00 00 00 00 00  00 00 00 00 00 00 41 54  |..............AT|
        0001cd70  4c 20 43 54 59 20 45 58  50 0d ff 00 00 00 00 00  |L CTY EXP.......|
        0001cd80  00 00 00 00 00 00 42 41  49 4c 45 59 20 54 50 4b  |......BAILEY TPK|
        </pre></div>
        <p>
        The same offset trick is used, but here the records are 24-byte since route names are shorter. Again, this isn't a particularly efficient storage mechanism, but we have over 165K available on a formatted disk, and RELative file access to any arbitrary record is quite quick. 
        <p>
        Despite the presence of side sectors, the actual <em>records</em> of a RELative file are still sequentially stored on disk with the usual forward track and sector pointers. As such, we don't need to grab the side sectors to simply extract its contents. For some period of time the <tt>c1541</tt> tool from the VICE suite would not copy REL files and this was only recently fixed, so here is a Perl script I threw together to iterate over a D64 disk image and transfer a file to standard output, either by name or if you specify a starting track and sector.
        <p>
        <div class="tx"><pre>
        #!/usr/bin/perl
        
        eval "use bytes"; die("usage: $0 d64 [file|-ts t s]\n") if (!length($ARGV[0]));
        open(W, $ARGV[0]) || die("open: $!\n");
        undef $/; @buf = unpack("C*", &lt;W&gt;); close(W);
        die("abnormally small d64\n") if (scalar(@buf) &lt; 174848);
        
        if ($ARGV[1] eq '-ts' &amp;&amp; $ARGV[2] &gt; 0 &amp;&amp; length($ARGV[3])) {
        	$ft = 0+$ARGV[2]; $fs = 0+$ARGV[3]; $head = &amp;tsoff($ft,fs);
        } elsif ($ARGV[1] eq '-off' &amp;&amp; length($ARGV[2])) {
        	$head = ($ARGV[2] =~ /^0x/) ? hex($ARGV[2]) : 0+$ARGV[2];
        	die("invalid sector offset\n") if ($head &amp; 255);
        } else {
        @fts = qw(DEL SEQ PRG USR REL ??? ??? ???); # 18,0 = offset 91392 0x16500
        $head = &amp;tsoff(18, 1); FOUND: for(;;) { $nt = $buf[$head]; $ns = $buf[$head+1];
        	for($i=0;$i&lt;8;$i++,$head+=32) { # each sector has 8 entries
        		next unless ($buf[$head+2] || $buf[$head+3] || $buf[$head+4]);
        		$type = $buf[$head+2] &amp; 7;
        		$ft = $buf[$head+3]; $fs = $buf[$head+4];
        		$sst = $buf[$head+21]; $sss = $buf[$head+22];
        		$rs = $buf[$head+23];
        		$fn = ''; for($j=5;$j&lt;21;$j++) {
        			$fn .= chr($buf[$head+$j]) unless
        				($buf[$head+$j] == 160);
        		}
        		warn "$fts[$type] $fn\n";
        		last FOUND if (length($ARGV[1]) &amp;&amp; $fn eq $ARGV[1]);
        	}
        	$type = -1; last unless ($nt); $head = &amp;tsoff($nt, $ns);
        }
        exit(0) unless (length($ARGV[1]));
        die("file not found\n") unless ($type &gt; -1);
        warn "recordsize $rs, side sector block at $sst/$sss\n" if ($type == 4);
        warn "data at $ft/$fs\n";
        $head = &amp;tsoff($ft, $fs);
        }
        for(;;) { $nt = $buf[$head]; $ns = $buf[$head+1];
        	if ($nt) {
        	for($i=2;$i&lt;256;$i++) { print STDOUT pack("C", $buf[$head+$i]); }
        	} else {
        	for($i=2;$i&lt;$ns;$i++) { print STDOUT pack("C", $buf[$head+$i]); }
        	}
        	last unless ($nt); warn "data at $nt/$ns\n"; $head = &amp;tsoff($nt, $ns);
        }
        
        # 1-17 21 sectors, 18-24 19 sectors, 25-30 18 sectors, 31-35 17 sectors
        sub tsoff {
        	my ($t, $s) = (@_); my $ts; my $off=0; for($ts=1;$ts&lt;$t;$ts++) {
        		$off += ($ts &lt; 18) ? (21 * 256) : ($ts &lt; 25) ? (19 * 256) :
        			($ts &lt; 31) ? (18 * 256) : (17 * 256);
        	} return ($off + ($s * 256));
        }
        </pre></div>
        <p>
        Because this yanks the files "raw," we will then need to strip them down. Feed the extracted REL records to this and you'll get a text file:
        <p>
        <div class="tx"><pre>
        #!/usr/bin/perl
        
        eval "use bytes";
        $/ = "\015"; while(&lt;&gt;) {
        	chomp;
        	s/^[\0\377]+//;
        	print"$_ \n";
        }
        </pre></div>
        <p>
        You'll notice that both the cities and roads lists are, or at least start out, sorted. All C64 Roadsearch images I've seen circulating so far have been altered by their previous owners to add their own local roads and cities, and their changes can be easily distinguished at the point where the lists abruptly go out of alphabetical order.
        <p>
        There is also a pair of SEQuential files, one named <tt>MPH</tt> and serving the same function to store the preferred speed and fuel economy, and a second one simply named <tt>M</tt>. This file contains four ASCII numbers, one obviously recognizeable as our serial number, though this is only one of the two places the program checks. The others are the number of cities (406, or 487 in the 1985 version), number of roads (215 in 1985), and a third we don't yet know the purpose of. You can confirm the first two by checking it against the number of lines in the files you extracted.
        <p>
        What we <em>don't</em> see are files for the arrays we spotted on the Apple disk. The only file left big enough to account for those is <tt>MATS</tt>. To figure out how that works, we should start digging into the program.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgaeV5Jqw0S1CRaRb-l7qNC6bEiTc80zO2tfaxRF7gVC0OhrCkorLxpFGiWEDR-1qQg4eY1PPgzdnBLDX0peh59P5cNJI1Kf77XHbrj3sMpGtaeJoiN6YQW1bJHfzrknccQGUduH-jGUdQTYeo3GMpmgp6PIYFhVL33R4RivTfrHkGM8S48MynlwvSaDNI/s1309/jetpack-yc-198412.jpg" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" height="320" data-original-height="1309" data-original-width="915" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgaeV5Jqw0S1CRaRb-l7qNC6bEiTc80zO2tfaxRF7gVC0OhrCkorLxpFGiWEDR-1qQg4eY1PPgzdnBLDX0peh59P5cNJI1Kf77XHbrj3sMpGtaeJoiN6YQW1bJHfzrknccQGUduH-jGUdQTYeo3GMpmgp6PIYFhVL33R4RivTfrHkGM8S48MynlwvSaDNI/s320/jetpack-yc-198412.jpg"/></a></div>
        
        We had to make an educated (though I assert likely correct) guess about the compiler used with the Apple II version, but the source of the Commodore 64 version is immediately given away by the presence of <tt>RTL-64</tt>, a runtime library and the telltale sign of a program compiled with DTL BASIC. DTL BASIC, formally DTL-BASIC 64 Jetpack, became extremely popular with developers not just due to its good performance and compatibility but also requiring no royalties to sell programs compiled with it as long as credit was given. An optional "protector" version can obfuscate the program and/or require a hardware dongle, though this version is rarer due to its expense (and fortunately was not used here). The runtime library slots into the RAM under the BASIC ROM, so there is no obvious loss of free memory. DTL stood for "Drive Technology Ltd." and was written by David Hughes in the UK, first for the PET; the compiler is notable for being compiled with itself, like Microsoft TASC, and using the same "RTL" runtime library and protection system (and, obnoxiously, a dongle) as the object code it generates. The 64 tape version is substantially less capable than the disk one.
        <p>
        DTL BASIC compiles to its own bespoke P-code which is executed by the RTL. It achieves its speed through a greater degree of precalculation and preparsing (e.g., pre-resolving values and line numbers, removal of comments, etc.), a custom garbage collection routine, and also, where possible, the use of true signed 16-bit integer math. This is a substantial speed-up over most Microsoft-derived BASICs, in which Microsoft Binary Format floating point is the native system for all calculations to the point where integer variables must first be <em>converted</em> to floating point, the computation performed, and then converted <em>back</em>. Ordinarily this would only make them useful for smaller arrays in memory because the double conversion will make them slower than regular floating point variables. However, DTL BASIC <em>does</em> perform true integer math without conversion, first for all variables explicitly declared as integer, and even autoconverting other variables at compile time with a directive (pragma).
        <p>
        Although some private work on a decompiler <a href="https://csdb.dk/forums/index.php?roomid=9&amp;topicid=112786&amp;showallposts=1">reportedly exists</a>, to the best of my knowledge that decompiler remains unfinished and unavailable. Interestingly, what I presume is the earlier 1984 disk image has some ghost directory entries, two each for the source BASIC programs and their "symbol tables" used by <tt>ERROR LOCATE</tt> for runtime errors:
        <p>
        <div class="tx"><pre>
        00016980  00 00 00 08 00 49 44 42  41 2d 53 52 43 a0 a0 a0  |.....IDBA-SRC...|
        00016990  a0 a0 a0 a0 a0 00 00 00  00 00 00 00 00 00 31 00  |..............1.|
        000169a0  00 00 00 1c 04 4c 4e 2d  52 4f 41 44 53 45 41 52  |.....LN-ROADSEAR|
        000169b0  43 48 2b a0 a0 00 00 00  00 00 00 00 00 00 08 00  |CH+.............|
        000169c0  00 00 00 06 02 52 4f 41  44 53 45 41 52 43 48 2b  |.....ROADSEARCH+|
        000169d0  2d 53 52 43 a0 00 00 00  00 00 00 00 00 00 30 00  |-SRC..........0.|
        000169e0  00 00 00 1c 05 4c 4e 2d  49 44 42 41 a0 a0 a0 a0  |.....LN-IDBA....|
        000169f0  a0 a0 a0 a0 a0 00 00 00  00 00 00 00 00 00 09 00  |................|
        </pre></div>
        <p>
        Sadly these source files were overwritten and cannot be resurrected, and even the ghost entries were purged on the second 1984 image. However, two aspects of the compiler make it possible to recover at least a portion of the original program text by hand. The first is that not all statements of the original program are fully converted to P-code: in particular, <tt>READ</tt>/<tt>DATA</tt>, <tt>OPEN</tt>, <tt>INPUT</tt>/<tt>INPUT#</tt>, <tt>DIM</tt>, <tt>PRINT</tt>/<tt>PRINT#</tt> and possibly others will be preserved nearly in their original BASIC form, including literal strings and most usefully <em>variable names</em>. For example, if we pull the compiled <tt>ROADSEARCH+</tt> off the disk image and run it through <tt>strings</tt>, we see text not unlike a BASIC program:
        <p>
        <div class="tx"><pre>
        % strings roadsearch+
        2073
        hhLH
        RTL-64 R
        h` _
         234,234,234,234,234,173,237,192,174,238,192, 172,239,192,32,186,255,173,224,192, 162,225,160,192,32,189,255,96,234,234, 234,234,169,0,32,144,255,96,234,234, 234,234,234,234,234,234,234,234, 32,0,192,169,0,166,251,164,252,32,213, 255,32,32,192,96
        VL-ROADSEARCH+W^
        1,8,15,"I":
        N%(756,4):A
        B%(1080,3):A
        T%(26):A
        8)"***********************"
        8)"**                   **"
        8)"**  ROADSEARCH-PLUS  **"
        8)"**    USA-CANADA     **"
        8)"**                   **"
        8)"**  COPYRIGHT 1985   **"
        8)"**        BY         **"
        8)"** COLUMBIA SOFTWARE **"
        8)"**                   **"
        8)"**ALL RIGHTS RESERVED**"
        8)"***********************":
        S5%:
        6,8,3,"0:MPH,S,R"
        6,MG
        6,MH
        5,8,4,"0:M,S,R"
        5,CN%
        5,CB%
        5,CR%
        5,SN%
        23)"SN#";SN%
        "SELECT ONE:"
        [...]
        </pre></div>
        <p>
        DTL-compiled programs always start with an <tt>SYS 2073</tt> to jump into a small machine-code subroutine linked into the object. This section of code loads the RTL (the filename follows) and has other minor housekeeping functions, including one we'll explain shortly when we break into the program while it's running. It resides here so that it can bank BASIC ROM in or out as necessary without crashing the computer.
        <p>
        Following that is an incomplete machine language subroutine in a consolidated <tt>DATA</tt> statement. Disassembly of the fragment shows it's clearly intended to run from $c000, but at least part of it is missing. Of the portion we can see here, however, there are calls for what appears to be a Kernal load, so if we drop a breakpoint on $ffba in VICE (e.g., the Kernal SETLFS routine) we can run the 6502's call stack back to see the full routine and the filename (at $c0e1) it's trying to access: <tt>MATS</tt>. It loads it straight into memory in the middle of the available BASIC range.
        <p>
        After that, now we see the arrays we saw in the Apple II version, but more importantly they're clearly part of <tt>DIM</tt> statements, so we can also see their dimensions. We already knew <tt>T%()</tt> was likely to be only 26 (27 counting the zero index) integers long from dumping the Apple version's contents, but the <tt>N%()</tt> array has up to 757 entries of five fields each, and <tt>B%()</tt> is even bigger, with 1081 records of four fields each. This is obviously where our map data is stored, and <tt>MATS</tt> is the file it seems to be loading to populate them.
        <p>
        This brings us to the second aspect of DTL Jetpack that helps to partially decipher the program: to facilitate some reuse of the BASIC ROM, the generated code will still create and maintain BASIC-compatible variables which we can locate in RAM. So that we know what we're dealing with, we need to figure out some way to stop the program while it's running to examine its state. Naturally the compiler offers a means to defeat this.
          
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgctaxqZFUZaTxhR-_KFRlYeOZw_hBbtYo7sRbI0egkJZ42VlvAq2jjUJBatcAX6SXguRTSMg4UlqbNZ2xTFQhxbGCeHqITH9xQ47FFzSPNGANc62zTrQOkrwCeaHMSXG9JF5IKleZ6Ish7quvPjI1cOCbLep_OPe3u5ozMCH8rwzJvFBgly0ZfatNj0Sg/s1062/Screenshot%202025-08-16%20at%205.22.36%E2%80%AFPM.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="894" data-original-width="1062" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgctaxqZFUZaTxhR-_KFRlYeOZw_hBbtYo7sRbI0egkJZ42VlvAq2jjUJBatcAX6SXguRTSMg4UlqbNZ2xTFQhxbGCeHqITH9xQ47FFzSPNGANc62zTrQOkrwCeaHMSXG9JF5IKleZ6Ish7quvPjI1cOCbLep_OPe3u5ozMCH8rwzJvFBgly0ZfatNj0Sg/s320/Screenshot%202025-08-16%20at%205.22.36%E2%80%AFPM.png"/></a></div>
        
        With the program running we can see in the VICE monitor that the Kernal STOP routine has been revectored to $084f, within the utility section at the beginning of the program. Here's the complete disassembly starting at $080d/2061 with my annotations. Some of this code doesn't appear to be called under normal circumstances.
        <p>
        <div class="tx"><pre>
        ; warm start (2061)
        .C:080d  20 52 08    JSR $0852
        .C:0810  4C 2B A9    JMP $A92B
        
        ; not called?
        .C:0813  20 52 08    JSR $0852
        .C:0816  4C 11 A9    JMP $A911
        
        ; cold start (2073)
        ; load the RTL if flag not set, then start P-code execution
        .C:0819  20 52 08    JSR $0852
        .C:081c  AD FF 02    LDA $02FF
        .C:081f  C9 64       CMP #$64
        .C:0821  F0 17       BEQ $083A
        .C:0823  A9 3F       LDA #$3F
        .C:0825  85 BB       STA $BB
        .C:0827  A9 08       LDA #$08
        .C:0829  85 BC       STA $BC
        .C:082b  A9 06       LDA #$06
        .C:082d  85 B7       STA $B7
        .C:082f  A9 00       LDA #$00
        .C:0831  85 B9       STA $B9
        .C:0833  A2 00       LDX #$00
        .C:0835  A0 A0       LDY #$A0
        .C:0837  20 D5 FF    JSR $FFD5
        .C:083a  68          PLA
        .C:083b  68          PLA
        .C:083c  4C 48 A0    JMP $A048
        .C:083f              .asc "RTL-64"
        
        ; seems to get called on a crash or error
        .C:0845  20 52 08    JSR $0852
        .C:0848  20 2F A0    JSR $A02F ; jumps to $a948
        .C:084b  20 5F 08    JSR $085F
        .C:084e  60          RTS
        
        ; dummy STOP routine
        .C:084f  A2 01       LDX #$01
        .C:0851  60          RTS
        
        ; bank out BASIC ROM
        .C:0852  A9 03       LDA #$03
        .C:0854  05 00       ORA $00
        .C:0856  85 00       STA $00
        .C:0858  A9 FE       LDA #$FE
        .C:085a  25 01       AND $01
        .C:085c  85 01       STA $01
        .C:085e  60          RTS
        
        ; bank in BASIC ROM
        .C:085f  48          PHA
        .C:0860  A9 03       LDA #$03
        .C:0862  05 00       ORA $00
        .C:0864  85 00       STA $00
        .C:0866  A5 01       LDA $01
        .C:0868  09 01       ORA #$01
        .C:086a  85 01       STA $01
        .C:086c  68          PLA
        .C:086d  60          RTS
        
        ; execute next statement (using BASIC ROM)
        .C:086e  20 5F 08    JSR $085F
        .C:0871  20 ED A7    JSR $A7ED
        .C:0874  20 52 08    JSR $0852
        .C:0877  60          RTS
        </pre></div>
        <p>
        With the dummy routine at $084f in place, RUN/STOP and RUN/STOP-RESTORE have no observable effect. This feature is controlled by DTL Jetpack's <tt>DS</tt> and <tt>ES</tt> compiler directives which disable and enable RUN/STOP respectively. If we scan the RTL for code that modifies $0328 and $0329 where the STOP routine is vectored, we find this segment:
        <p>
        <div class="tx"><pre>
        .C:b7c9  20 DA B7    JSR $B7DA
        .C:b7cc  20 D9 A6    JSR $A6D9
        .C:b7cf  A9 EA       LDA #$EA
        .C:b7d1  8D 22 A8    STA $A822
        .C:b7d4  20 DA B7    JSR $B7DA
        .C:b7d7  4C 58 A8    JMP $A858
        .C:b7da  A9 ED       LDA #$ED
        .C:b7dc  A2 F6       LDX #$F6
        .C:b7de  8D 28 03    STA $0328
        .C:b7e1  8E 29 03    STX $0329
        .C:b7e4  60          RTS
        .C:b7e5  A9 60       LDA #$60
        .C:b7e7  8D 22 A8    STA $A822
        .C:b7ea  20 F0 B7    JSR $B7F0
        .C:b7ed  4C 58 A8    JMP $A858
        .C:b7f0  A9 4F       LDA #$4F
        .C:b7f2  A2 08       LDX #$08
        .C:b7f4  4C DE B7    JMP $B7DE
        </pre></div>
        <p>
        $f6ed is the normal value for the STOP vector, so we can assume that the routine at $b7c9 (which calls the routine at $b7da to set it) enables RUN/STOP, and thus the routine at $b7e5 disables it. Both routines twiddle a byte at $a822, part of this section:
        <p>
        <div class="tx"><pre>
        .C:a822  EA          NOP
        .C:a823  A5 91       LDA $91
        .C:a825  C9 7F       CMP #$7F
        .C:a827  D0 1C       BNE $A845
        .C:a829  20 D9 A6    JSR $A6D9
        .C:a82c  20 DA B7    JSR $B7DA
        .C:a82f  20 E5 A6    JSR $A6E5
        .C:a832  A5 39       LDA $39
        .C:a834  85 7A       STA $7A
        .C:a836  A5 3A       LDA $3A
        .C:a838  85 7B       STA $7B
        .C:a83a  A9 02       LDA #$02
        .C:a83c  20 7B A0    JSR $A07B
        .C:a83f  A9 00       LDA #$00
        .C:a841  38          SEC
        .C:a842  4C 6E 08    JMP $086E
        .C:a845  60          RTS
        </pre></div>
        <p>
        By default the byte at $a822 is $ea, a 6502 <tt>NOP</tt>. This falls through to checking $91 for the state of the STOP key at the last time the keyboard matrix was scanned and branching accordingly. When the STOP routine is revectored, at the same time the byte at $a822 is changed to $60 <tt>RTS</tt> so that the STOP key check is never performed. (The RTL further achieves additional speed here by only doing this check on <tt>NEXT</tt> and <tt>IF</tt> statements even if the check is enabled.)
        <p>
        The simplest way to deal with this is to alter <tt>RTL-64</tt> with a hex editor and turn everything from $b7e5 to $b7ec inclusive into <tt>NOP</tt>s. This turns the <tt>DS</tt> directive into a no-op as well, and now we can break out of the program by mashing RUN/STOP, though we'll do this after <tt>MATS</tt> is loaded. Parenthetically, instead of using <tt>CONT</tt>, the compiled program can be continued with <tt>SYS 2061</tt> instead of <tt>SYS 2073</tt>.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiFB-6vld9ebrvJ06PZOR5JRPa7yiHva-A3gY4FR-oQMKwXZkqIuHbOfaLmnbjmfg4jIKJbQXlebajEPO3w7LQFi_wjWC_wslARWad38J8FmDzGXOaGA6MWrtmIDNPiHcMTv9Xu4jHZNCVgBOaANat7DiGW6uUmOjGhRJ7T9drxSiZEHiSfbbEh517Chr8/s1152/big-vice-screen-2025081612055149.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiFB-6vld9ebrvJ06PZOR5JRPa7yiHva-A3gY4FR-oQMKwXZkqIuHbOfaLmnbjmfg4jIKJbQXlebajEPO3w7LQFi_wjWC_wslARWad38J8FmDzGXOaGA6MWrtmIDNPiHcMTv9Xu4jHZNCVgBOaANat7DiGW6uUmOjGhRJ7T9drxSiZEHiSfbbEh517Chr8/s320/big-vice-screen-2025081612055149.png"/></a></div>
        
        As a test we dump <tt>T%()</tt>, since we've assumed it has the same purpose in the Commodore port, and it does (once again there are no cities starting with Z, so the final letter points to non-existent record 488 beyond Yuma, AZ as record 487). We then use the BASIC routine at $b08b (<tt>SYS 45195</tt>) to look up the address of the first variable in the array &mdash; note no comma between the <tt>SYS</tt> and the variable reference &mdash; which is deposited as a 16-bit address in location $47 (71). In this case the pointer is to $6b8a (27530), the actual zeroth data element, so if we rewind a few bytes we'll also get the array descriptor as well as its entire contents:
        <p>
        <div class="tx"><pre>
        >C:6b83  d4 80 3d 00  01 00 1b 00  01 00 01 00  0f 00 2d 00
        >C:6b93  52 00 60 00  69 00 7c 00  8b 00 97 00  ed 00 f6 00
        >C:6ba3  fe 01 16 01  36 01 43 01  4e 01 62 01  63 01 70 01
        >C:6bb3  a3 01 b6 01  c8 01 cf 01  e4 01 e4 01  e8
        </pre></div>
        <p>
        Some explanation is in order: after the end of BASIC program text is non-array variables, and then any array variables (I'm ignoring strings for purposes of this discussion). The first two bytes are the variable name, with a null if the variable name is only one byte long. Type is determined by the combination of high bits (neither set is floating point, first byte set is a string, both bytes set is an integer variable as it is here). The second pair of bytes is the little-endian 16-bit length of the entire array including the name bytes (here 61 bytes total), followed by a byte for the number of dimensions in the variable (here one). Interestingly, the values that come after it are all <em>big</em>-endian: the dimensions themselves (a single big-endian short specified as 27, i.e. 26 plus the zeroth element), and then each value. In multidimensional arrays, each dimension is run out fully before moving to the next.
        <p>
        We can easily pick out the values we saw for <tt>T%()</tt> in the above dump, but more importantly we now have a long unambiguous 61-byte key we can search for. The entire sequence shows up in <tt>MATS</tt>, demonstrating that the file is in fact nothing more than an in-place memory dump of the program arrays' contents. Rather than manually dump the other two arrays from BASIC, we can simply walk <tt>MATS</tt> and pull the array values directly.
        <p>
        <div class="tx"><pre>
        #!/usr/bin/perl
        
        eval "use bytes"; undef %a;
        # slurp file and drop starting address
        $/ = undef; @arr = unpack("C*", &lt;&gt;); splice(@arr, 0, 2);
        for(;;) {
        	$v1 = shift @arr; $v2 = shift @arr; last if (!$v1);
        	$j1 = $v1 &amp; 128; $j2 = $v2 &amp; 128;
        	$v1 = chr($v1 &amp; 127);
        	$v2 = ($v2 == 0 || $v2 == 128) ? '' : chr($v2 &amp; 127);
        	$vn = "$v1$v2" . (
        		($j1 &amp; $j2) ? '%' :
        		($j1) ? '$' :
        		'');
        	$vs = shift @arr;
        	$vt = shift @arr;
        	$vd = shift @arr;
        	print STDOUT "$vn ($vd dimensions) \n";
        	if ($vd == 2) {
        		$d2 = 256*(shift @arr);
        		$d2 += shift @arr;
        		$d1 = 256*(shift @arr);
        		$d1 += shift @arr;
        		for($j=0;$j&lt;$d2;$j++) {
        			for($i=0;$i&lt;$d1;$i++) {
        				$v = 256*shift(@arr);
        				$v += shift(@arr);
        				$a{$vn}-&gt;[$i]-&gt;[$j] = $v;
        			}
        		}
        	} else {
        		print STDOUT " unsupported\n";
        		splice(@arr, 0, (($vt &lt;&lt; 8)+$vs-5));
        	}
        }
        foreach (keys %a) {
        	unless (open(K, "&gt;out-$_\n")) {
        		warn "out-$_ open: $!\n";
        		next;
        	}
        	foreach (@{ $a{$_} }) {
        		print K join("\t", @{ $_ }), "\n";
        	}
        	close(K);
        }
        </pre></div>
        <p>
        This Perl script walks a memory dump of arrays (currently only two-dimensional integer arrays are implemented because that's all we need for this project). It skips the starting address and then writes out tab-separated values into files named by the arrays it finds. Unlike their storage in memory, where values go (0,0), (1,0), (2,0) ... (0,1), (1,1) and so on, this pivots the arrays horizontally so you get (0,0), (0,1), (0,2), etc., grouped into lines as "rows."
        <p>
        <tt>B%()</tt> is the easiest to grok. Ignoring index 0, here is an extract from the file:
        <p>
        <div class="tx"><pre>
        28      335     375     48
        28      375     274     64
        59      85      332     54
        59      332     420     84
        46      420     412     23
        38      112     70      80
        38      70      11      72
        38      11      10      146
        </pre></div>
        <p>
        <tt>B%()</tt> is referenced directly in one <tt>PRINT</tt> statement when displaying outgoing roads from a particular city:
        <p>
        <div class="tx"><pre>
        % strings roadsearch+
        [...]
        " TAKE ROAD   MI.     CONNECTING CITY"
        "----------   --- -----------------------":
        "--------------------------------------":L
        12)B%(I,3);
        17)C$
        ")":LJ
        1,8,15
        3,8,3,"ROADS":
        1,"P"
        (LB%)
        (HB%)
        3,R$
        1,8,15
        3,8,3,"CITIES":
        1,"P"
        (LB%)
        (HB%)
        3,C$
        </pre></div>
        <p>
        Let's take city record number 1, which is the misspelled (but only in the 1985 version) <tt>ABILINE TX</tt> (that is, Abilene, Texas). The develop-a-route feature will list all connected cities. For Abilene, there are five in the database.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjTvkeTO75E9jCRgkSVzBNFhIDBRWk9s-ATg9KbgbPF9I9VNsnb3sNzC-1QhXztbAneGAcSS7vMxTSgI8rvtbMoSFomGVBnzIUZMGx9nQQdEJ4mts-Jq-971iYW5cGqHpA-07pl6pU6pEnu1tmGDmdu4QpG86GY6ig9_u6-vvUZ8udJbQMVeg1HxQl9Dhk/s1152/big-vice-screen-2025081715443524.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjTvkeTO75E9jCRgkSVzBNFhIDBRWk9s-ATg9KbgbPF9I9VNsnb3sNzC-1QhXztbAneGAcSS7vMxTSgI8rvtbMoSFomGVBnzIUZMGx9nQQdEJ4mts-Jq-971iYW5cGqHpA-07pl6pU6pEnu1tmGDmdu4QpG86GY6ig9_u6-vvUZ8udJbQMVeg1HxQl9Dhk/s320/big-vice-screen-2025081715443524.png"/></a></div>
        
        Now that we know what should appear in the list, we'll run it again but hold down RUN/STOP (in our hacked version) so that we immediately drop to BASIC before the first entry is <tt>PRINT</tt>ed.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgAF9OnRqEGDCRcoScuzggrARxzXMkBBF8uHWyadMwXvkH8ACisQJdiSWhTYEXdUDBK__LkXvfq1dtcXeGBlkGg4NUg-29MZsGMtwhavvvec8kY-3Nt-fXc1exXbIRW507IEFIX3EWre1UyvE5Hi-6isTknCrTQok0fKwk-R2uxaBu-GhWKT12ItP69rFw/s1152/big-vice-screen-2025081715301642.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgAF9OnRqEGDCRcoScuzggrARxzXMkBBF8uHWyadMwXvkH8ACisQJdiSWhTYEXdUDBK__LkXvfq1dtcXeGBlkGg4NUg-29MZsGMtwhavvvec8kY-3Nt-fXc1exXbIRW507IEFIX3EWre1UyvE5Hi-6isTknCrTQok0fKwk-R2uxaBu-GhWKT12ItP69rFw/s320/big-vice-screen-2025081715301642.png"/></a></div>
        
        We can see from the <tt>PRINT</tt>s above that <tt>B%(I,3)</tt> represents the mile length of the current connecting segment indexed by <tt>I</tt> (here 39), which would make <tt>B%()</tt> the array containing the connecting roads between cities and junctions. We also know it gets <tt>R$</tt> and <tt>C$</tt> from the RELative files <tt>ROADS</tt> and <tt>CITIES</tt> on each row. Helpfully, it tells us that <tt>FORT WORTH TX</tt> is city number 115 (it is), which we can see is <tt>B%(I,1)</tt>. <tt>B%(I,2)</tt> is 1, which must be us, leaving <tt>B%(I,0)</tt> as the route number which must be the record number for Interstate 20 in <tt>ROADS</tt>.
        <p>
        If we grab line 39 from <tt>out-B%</tt> (the value of index <tt>I</tt>), we do indeed see these same values. However, we can now do the search ourselves by just hunting for any record containing city 1 in columns 1 or 2 of our dumped array file (<tt>^I</tt> is a TAB character):
        <p>
        <div class="tx"><pre>
        % grep '^I1^I' out-B%
        38	115	1	153
        38	1	26	111
        162	1	473	143
        193	389	1	207
        193	1	245	147
        </pre></div>
        <p>
        Or, to show the correspondence more plainly:
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgRVnfDBVOpBp6aboYHvLc1eIcQTxhSvMw6MAFvWSjaRyssrnfHiCvvZLNHp4_EyMq7F09sManDYN_ZQavA0FJTlr2ht8YVtVW5mzGXbi5ZO4MfD5vSqa9yCSzxnwuoTAr0iyrtxwRBWM3jQF6VJJr7NCqOXl1xlMnQSvn3syJHjXH4vX2ax6jo5cfnOc4/s1678/Screenshot%202025-08-07%20at%201.27.13%E2%80%AFPM.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="194" data-original-width="1678" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgRVnfDBVOpBp6aboYHvLc1eIcQTxhSvMw6MAFvWSjaRyssrnfHiCvvZLNHp4_EyMq7F09sManDYN_ZQavA0FJTlr2ht8YVtVW5mzGXbi5ZO4MfD5vSqa9yCSzxnwuoTAr0iyrtxwRBWM3jQF6VJJr7NCqOXl1xlMnQSvn3syJHjXH4vX2ax6jo5cfnOc4/s320/Screenshot%202025-08-07%20at%201.27.13%E2%80%AFPM.png"/></a></div>
        
        I think their correlation is obvious, so that's it for <tt>B%()</tt>.
        <p>
        <tt>N%()</tt>, on the other hand, is a little harder to crack. Other than its apparent <tt>DIM</tt> statement at the beginning (as shown above), it is never displayed directly to the user and never appears again in plaintext in the compiled object. Here are the first few entries of the array:
        <p>
        <div class="tx"><pre>
        % head out-N%
        9999	0	0	0	0
        5664	17406	32766	0	0
        7170	14226	32766	0	0
        7444	12871	32766	0	0
        7617	16294	32766	0	0
        6123	18613	32766	0	0
        7085	13158	32766	0	0
        6145	17773	32766	0	0
        5873	14978	32766	0	0
        6213	14408	32766	0	0
        </pre></div>
        <p>
        The first record (index 0) is the second place where the serial number is stored, though only the map editor references it. Not counting index 0 the file has exactly one record for every city or junction, so it must correspond to them somehow. Otherwise, column 3 (except for index 0) is always an unusual value 32,766, near the positive maximum for a 16-bit integer variable, and columns 4 and 5 are always zero (note from the future: this is not always true for routes which are added in the editor). Additionally, columns 1 and 2 have an odd statistical distribution where the first is always between 4499 and 8915 and the second between 11839 and 21522. There are no negative values anywhere in the file, and the first three columns are <em>never</em> zero (other than index 0). Whatever they are, they are certainly not random.
        <p>
        The meaning of the values in this array managed to successfully evade my understanding for awhile, so in the meantime I turned to figuring out how Roadsearch does its routing.
        <p>
        The theorists reading this have already internalized this part as an exercise in <i>graph traversal</i>, specifically finding the shortest path. Abstractly the cities and junctions can be considered as the <i>nodes</i> or <i>vertices</i> of a <i>graph</i>. These nodes are enumerated by name in <tt>CITIES</tt> with additional, currently opaque, metadata in <tt>N%()</tt>. The nodes are then connected with <i>edges</i>, which are <i>weighted</i> by their mile length. These edges are the highway alignments listed with termini and length in <tt>B%()</tt> and their names in <tt>ROADS</tt>. The program appears to universally treat all edges as <i>bi-directional</i>, going both to and from a destination, which also makes the graph generally <i>undirected</i>. Because of the way the database (and indeed the nature of the American highway network) is constructed, all nodes are eventually reachable from any other node.
        <p>
        For a first analysis I presented Roadsearch with a drive I know well, having done it as part of longer trips many times in both directions: Bishop, California (city number 31) to Pendleton, Oregon (city number 338). This run can be traveled on a single highway number, namely US Highway 395, and it is also the shortest route. I have not indicated any roads that should be removed, so it will use everything in its database.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgU7wbvbuk1NCaWnbIk4wKylCRY3duSlOcJqq_wFjGoXAMbibo3FRVkczxvWFldK7J9ZTRujw1XXNht-jS4zARfuL_LPu3M9S9ycbaBHdb1eHRMRiaEEe0e2h_uRpEGzJpIc4UqGU2LnXaJFapxryBMBTFw2kqlO6sM8z2REOwH8dSTvAx8H0oLS0a8fN4/s4080/PXL_20250725_162042481.jpg" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgU7wbvbuk1NCaWnbIk4wKylCRY3duSlOcJqq_wFjGoXAMbibo3FRVkczxvWFldK7J9ZTRujw1XXNht-jS4zARfuL_LPu3M9S9ycbaBHdb1eHRMRiaEEe0e2h_uRpEGzJpIc4UqGU2LnXaJFapxryBMBTFw2kqlO6sM8z2REOwH8dSTvAx8H0oLS0a8fN4/s320/PXL_20250725_162042481.jpg"/></a></div>
        
        On the real machine (an NTSC 128DCR in 64 mode at 1.02272MHz, but also checked on the SX-64 for comparison) the routing process takes about two minutes and eight seconds per my stopwatch. There is no disk access during the routing process, so this is all CPU time.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj6ni2Wr8eMLfg_u9vYC6gnfXg474uaQj5Ym9tzXnfb9s-8gdj-Q5C1HhYYZXEPucLBiiIFHjCJGwNR5mTck6Nc9VxO-V9SQFmI8M5rvCMFqGRJrVdT8LJ27QY0dOp29WPQ34l3Aq0gZpkC13O6bs1uGe3p1b6fer2DElvvRWC4PvnPMm11DP74uJVjmCQ/s1152/big-vice-screen-2025081716425590.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj6ni2Wr8eMLfg_u9vYC6gnfXg474uaQj5Ym9tzXnfb9s-8gdj-Q5C1HhYYZXEPucLBiiIFHjCJGwNR5mTck6Nc9VxO-V9SQFmI8M5rvCMFqGRJrVdT8LJ27QY0dOp29WPQ34l3Aq0gZpkC13O6bs1uGe3p1b6fer2DElvvRWC4PvnPMm11DP74uJVjmCQ/s320/big-vice-screen-2025081716425590.png"/></a></div>
        
        On a fully-clocked 20MHz W65C816S SuperCPU, emulated here in VICE, it takes <em>five seconds</em>. No, warp mode was <em>not</em> on.
        <p>
        Take note of the progress display showing miles traveled. This is the first milepoint that appears. If we compare the edges (highway alignments) directly leaving from Bishop and Pendleton, an edge with a weight (length) of 198 miles only shows up leaving <em>Pendleton</em>, suggesting the program works the routing <em>backwards</em>:
        <p>
        <div class="tx"><pre>
        % grep '^I31^I' out-B%
        168	50	31	172
        168	31	442	184
        % grep '^I338^I' out-B%
        90	349	338	208
        90	338	207	171
        168	338	43	198 &lt;&lt;&lt;
        131	338	464	42
        </pre></div>
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9rsbyFN6-_xF_-3DimdaMucx6dird00-urVjezDRXTuCnb5ljMXostsIHiX0calCdjnyu0uH58dnYAuEctE3LZyNQ1P24vQ_wFABPn96W12Bxzopbtf06ioOKIzemfDg5ii-jquBLQ1k98zSw9DsDnZx-MIyungEuKDp4zxGuTm-1OCAaKv2pdBHcggA/s1152/big-vice-screen-2025081716351489.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9rsbyFN6-_xF_-3DimdaMucx6dird00-urVjezDRXTuCnb5ljMXostsIHiX0calCdjnyu0uH58dnYAuEctE3LZyNQ1P24vQ_wFABPn96W12Bxzopbtf06ioOKIzemfDg5ii-jquBLQ1k98zSw9DsDnZx-MIyungEuKDp4zxGuTm-1OCAaKv2pdBHcggA/s320/big-vice-screen-2025081716351489.png"/></a></div>
        
        The computed distance is 773 miles, which for 1985 would be approximately correct (depending on the exact endpoints which the program doesn't specify). The modern alignment is shorter by a few miles after the completion of Interstate 580 between Carson City and Reno, Nevada, which replaced several former alignments most of which are now signed as Business US 395 and Alternate US 395.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEqCUUe8ZOe6oxqORaDreZ-_FEdOnYmj4Xm4QYuQJVJLTNDxCilIE9ujBlpDBv3MKkqR-KGMU7j3gacJ0L0dLj0BgN65ye_-gDSzcnynYW2PiDVpeQ0Wei4dGFYFJ9ZLkkatBOi1mjr-RRwNw4O768hsgck5e5kcG4DNr3dML8E3vGIQCkb7nGzgMKw5s/s1152/big-vice-screen-2025081716354036.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEqCUUe8ZOe6oxqORaDreZ-_FEdOnYmj4Xm4QYuQJVJLTNDxCilIE9ujBlpDBv3MKkqR-KGMU7j3gacJ0L0dLj0BgN65ye_-gDSzcnynYW2PiDVpeQ0Wei4dGFYFJ9ZLkkatBOi1mjr-RRwNw4O768hsgck5e5kcG4DNr3dML8E3vGIQCkb7nGzgMKw5s/s320/big-vice-screen-2025081716354036.png"/></a></div>
        
        And here is the detailed leg-by-leg routing, very similar to the Apple II version (since they undoubtedly use the same or similar programming). Thirteen hours' drive wouldn't be far off as an estimate. Let's see if we can duplicate this process with our own code.
        <p>
        Arguably the "gold standard" for shortest path traversal is <a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Edsger Dijkstra's algorithm</a>, conceived in 1956 and published in 1959, an independent reimplementation of Vojtěch Jarník's 1930 minimum spanning tree algorithm that was also separately rediscovered and published by Robert C. Prim in 1957. In broad strokes, the algorithm works by building a tree out of the available nodes, putting them all into a queue. It keeps an array of costs for each node, initially set to an "infinite" value for all nodes except for the first node to be examined, traditionally the start point. It then repeatedly iterates over the queue: of all current nodes in the queue the lowest cost node is pulled out (so, first out, this will be the start point) and its edges are examined, selecting and marking any edges where the sum of the current node's cost and the cost of the edge (the mile length) are less than the current cost of the node it connects to (which, first out, will be "infinite"). The nodes connected by these marked edges take the current node as their parent, constructing the tree, and store the new lower cost value. Once the queue is empty, the algorithm halts and the tree is walked backwards from the target back to the start point, accumulating the optimal route using the parent pointers.
        <p>
        This Perl script accepts two city numbers and will generate the optimal route between them using the Roadsearch database with Dijkstra's algorithm. It expects <tt>cities</tt>, <tt>roads</tt> (both converted to text, not the raw RELative files) and <tt>out-B%</tt> to be in the same directory.
        <p>
        <div class="tx"><pre>
        #!/usr/bin/perl
        
        die("usage: $0 point_no_1 point_no_2\n") if (scalar(@ARGV) != 2);
        $p1 = $ARGV[0]; $p2 = $ARGV[1];
        die("wherever you go there you are\n") if ($p1 == $p2);
        
        open(K, "cities") || open(K, "cities.txt") || die("cities: $!\n");
        @cities = ( undef ); while(&lt;K&gt;) {
        	$ln++;
        	if ($ln==$p1) { $v1=$p1; print; }
        	if ($ln==$p2) { $v2=$p2; print; }
        	chomp; push(@cities, $_);
        
        	# build Dijkstra distance and prev maps
        	$dist[$ln] = 99999;
        	$prev[$ln] = undef;
        	push(@q, $ln);
        }
        die("both cities must be valid\n") if (!$v1 || !$v2);
        close(K);
        open(R, "roads") || open(R, "roads.txt") || die("roads: $!\n");
        open(B, "out-B%") || die("out-B%: $!\n");
        @roads = ( undef ); while(&lt;R&gt;) { chomp; push(@roads, $_); }
        close(R);
        $ee = 0; while(&lt;B&gt;) {
        	chomp;
        	($rn, $c1, $c2, $d) = split(/\t/, $_);
        	$rn += 0; $c1 += 0; $c2 += 0; $d += 0;
        	next if (!$d || !$c1 || !$c2 || !$rn);
        
        	push(@edges, [ $rn, $c1, $c2, $d ]);
        	push(@{ $a[$c1] }, [ $rn, $c2, $d, $ee ]);
        	push(@{ $a[$c2] }, [ $rn, $c1, $d, $ee++ ]);
        }
        close(B);
        
        $dist[$v1] = 0; while(scalar(@q)) {
        	# find minimum distance in Q
        	@q = sort { $dist[$a] &lt;=&gt; $dist[$b] } @q;
        	$u = shift(@q);
        	# find all arcs from $u
        	foreach $arc (@{ $a[$u] }) {
        		$v = $arc-&gt;[1];
        		$alt = $dist[$u] + $arc-&gt;[2];
        		if ($alt &lt; $dist[$v]) {
        			$dist[$v] = $alt;
        			$prev[$v] = $u;
        			$prou[$v] = $arc-&gt;[3];
        		}
        	}
        }
        
        $u = $v2; @s = ();
        while($u != $v1 &amp;&amp; defined($prev[$u])) {
        	unshift(@s, $prou[$u]);
        	$u = $prev[$u];
        	last unless (defined($u));
        }	
        print join(' - ', @s), "\n";
        $miles = 0; foreach(@s) {
        	print $roads[$edges[$_]-&gt;[0]], " - ",
        		$cities[$edges[$_]-&gt;[2]], " - ",
        		$cities[$edges[$_]-&gt;[1]], " ",
        		$edges[$_]-&gt;[3], " miles\n";
        	$miles += $edges[$_]-&gt;[3];
        }
        print "total $miles miles\n";
        </pre></div>
        <p>
        We build arrays of <tt>@cities</tt> and <tt>@roads</tt>, and turn <tt>B%()</tt> into <tt>@edges</tt> and <tt>@a</tt> (for <i>arcs</i>) for expedience. We then walk down the nodes and build the tree in <tt>@s</tt>, noting which arc/edge was used in <tt>@prou</tt> so that we can look it up later, and then at the end walk the parent pointers back and do all the dereferencing to generate a human-readable route. As a check we also dump <tt>@s</tt>, which indexes <tt>@edges</tt>. Here's what it computes for Bishop to Pendleton, forward and reverse:
        <p>
        <div class="tx"><pre>
        % route-dij 31 338
        BISHOP CA 
        PENDLETON OR 
        399 - 398 - 397 - 396 - 395
        US 395  - BISHOP CA  - CARSON CITY NV  172 miles
        US 395  - CARSON CITY NV  - RENO NV  30 miles
        US 395  - RENO NV  - LAKEVIEW OR  234 miles
        US 395  - LAKEVIEW OR  - BURNS OR  139 miles
        US 395  - BURNS OR  - PENDLETON OR  198 miles
        total 773 miles
        % route-dij 338 31
        BISHOP CA 
        PENDLETON OR 
        395 - 396 - 397 - 398 - 399
        US 395  - BURNS OR  - PENDLETON OR  198 miles
        US 395  - LAKEVIEW OR  - BURNS OR  139 miles
        US 395  - RENO NV  - LAKEVIEW OR  234 miles
        US 395  - CARSON CITY NV  - RENO NV  30 miles
        US 395  - BISHOP CA  - CARSON CITY NV  172 miles
        total 773 miles
        </pre></div>
        <p>
        This is the same answer, and Dijkstra's algorithm further gives us a clue about one of the columns in <tt>N%()</tt> &mdash; the one which is invariably 32766. We already know from the plaintext portion of the compiled program that there are no other arrays, so the routing must be built in-place in the arrays that are present. We need an starting "infinite" value for each node within the range of a 16-bit signed integer, and no optimal path in continental North America would ever exceed that mileage, so this is the "infinite" value used to build the route into <tt>N%()</tt>. (It gets reset by reloading <tt>MATS</tt> if you select the option to start over after route generation.)
        <p>
        That said, it's almost certain that the program is <em>not</em> using an implementation of Dijkstra's algorithm. The queue starts out with all (in this case 487) nodes in it, making finding the lowest cost node in the queue on each iteration quite expensive on a little ~1.02MHz 6502. The usual solution in later implementations is a min-priority queue to speed up the search, but we already know there are no other arrays in memory to construct a faster heap or tree, so any efficiency gained would likely be unimpressive. Furthermore, it's not clear the author would have known about this approach (the earliest work on it dates to the late 1970s, such as Johnson [1977]), and even if he did, it still doesn't explain the meaning of the first two columns in <tt>N%()</tt> which aren't even used by this algorithm. After all, they're not there for nothing.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgFrsGkOgwFg_OT95JugDozpW1cPT9mqIhE-amy2C_o41yocdq2E6EWho3PSd6irRfdZOMCnxr_Te8lFtmBTPxCUYaMCxZ3D6rAT-nU-o7JtvHnAiD4lvL__NNi7xPkjh5gn8viH85HsHwXUcAYao5LfSLnYqTEe97X4i0FMeHkAym8NTffvmzsUwH38Uw/s954/SRI_Shakey_with_callouts.jpg" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" height="320" data-original-height="954" data-original-width="600" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgFrsGkOgwFg_OT95JugDozpW1cPT9mqIhE-amy2C_o41yocdq2E6EWho3PSd6irRfdZOMCnxr_Te8lFtmBTPxCUYaMCxZ3D6rAT-nU-o7JtvHnAiD4lvL__NNi7xPkjh5gn8viH85HsHwXUcAYao5LfSLnYqTEe97X4i0FMeHkAym8NTffvmzsUwH38Uw/s320/SRI_Shakey_with_callouts.jpg"/></a></div>
        
        An alternative approach did exist at the time, however, published by Peter Hart, Nils Nilsson and Bertram Raphael in 1968. This algorithm came out of the Stanford Research Institute's Shakey project, the first general purpose robot intended to reason about its own actions (the photograph here is Shakey at SRI in 1972). The robot's height and proportions made it notoriously jittery in operation and led to its nickname.
        <p>
        To enable Shakey's autonomous motion about the lab required that it be able to solve its own path-finding requirements. Initially this was proposed using Graph Traverser, an ALGOL-60 program written at the University of Edinburgh, presumably by porting it to Lisp in which Shakey was programmed. Graph Traverser used a single evaluation function <i>E(x)</i> specific to the problem being examined to walk from a source to a target node, terminating when the target was reached. In the process it created a set of partial trees from the source to the target from which the lowest cumulative value of <i>E(x)</i> would ultimately be selected, starting with individual nodes where <i>E(x)</i> to some next immediate destination was locally smaller. Additionally, since it was now no longer required to construct a complete tree touching every possible node, the initial set of nodes considered could simply be the starting point. How the evaluation function was to be implemented was not specified, but a simple straight-line distance to the goal node would have been one logical means.
        <p>
        Raphael instead suggested that the function to be minimized be the <em>sum</em> of the distance to the goal node <em>and</em> the evaluation function, which was reworked as a <i>heuristic</i>. The heuristic thus provided a hint to the algorithm, ideally attracting it to the solution sooner by considering a smaller set of nodes. If the heuristic function was properly <i>admissible</i> &mdash; what Hart defined as never overstating the actual cost to get to the target &mdash; then this new algorithm could be proven to always find the lowest-cost path and greatly reduce comparisons if the solution converged quickly. Considering Graph Traverser as algorithm "A," this more informed <i>goal-directed</i> algorithm was dubbed "A*" (say it A-star).
        <p>
        If Roadsearch really is using A-star, at this point we don't know what the heuristic function is. (Note from the future: stay tuned.) Fortunately, a heuristic function that returns zero for all values is absolutely admissible because it will <em>never</em> overstate the actual cost. Although as a degenerate case doing so effectively becomes Dijkstra's algorithm, we'll still observe the runtime benefit of not having an initial queue potentially containing all possible nodes <em>and</em> being able to terminate early if the target is reached (which is always possible with Roadsearch's database).
        <p>
        To make the number of nodes more manageable for study, since we will also want to observe how the program behaves for comparison, we'll now consider a smaller routing problem that will be easier to reason about.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEimRuZgvtpwHIPf3MDdSpNOkVgK6JAmQuuWHgdJ6uaki5AYe1Z0CcJGH3pVCE4ZNWh7RWPCZmscvMPe6MdeVCZdn5aOzTHxEPnms5AlNCYsThagzn21Qo5CDUoJLmKwu68uSA5M8JYlTY1IuzDVMjSmACOwj1NDKydd2_OTSGp3Zfbkz23sZszMA55Yffc/s2425/sbn-nodes.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="1868" data-original-width="2425" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEimRuZgvtpwHIPf3MDdSpNOkVgK6JAmQuuWHgdJ6uaki5AYe1Z0CcJGH3pVCE4ZNWh7RWPCZmscvMPe6MdeVCZdn5aOzTHxEPnms5AlNCYsThagzn21Qo5CDUoJLmKwu68uSA5M8JYlTY1IuzDVMjSmACOwj1NDKydd2_OTSGp3Zfbkz23sZszMA55Yffc/s320/sbn-nodes.png"/></a></div>
        
        This is not an accurate map, and wasn't even accurate in 1985 because it doesn't contain Interstate 15E (today's Interstate 215), but this is largely how Roadsearch conceived of Southern California and the Mojave Desert. The routing we'll solve for is San Bernardino, California (375) to Needles, California (311), both within the largest county in the contiguous 48 United States (San Bernardino County, California). The optimal path is shown on the map as the blue path along "Interstate 15" and Interstate 40 and consists of five nodes (375 - 443 - 18 - 169 - 311), counting the start and goal. The white nodes are the blue nodes' immediate neighbours that are not part of the optimal route; all nodes contain their numbers so you can keep track. The highway edges between the numbers are also marked.
        <p>
        <div class="tx"><pre>
        #!/usr/bin/perl
        
        die("usage: $0 point_no_1 point_no_2\n") if (scalar(@ARGV) != 2);
        $p1 = $ARGV[0]; $p2 = $ARGV[1];
        die("wherever you go there you are\n") if ($p1 == $p2);
        
        open(K, "cities") || open(K, "cities.txt") || die("cities: $!\n");
        @cities = ( undef ); while(&lt;K&gt;) {
        	$ln++;
        	if ($ln==$p1) { $v1=$p1; print; }
        	if ($ln==$p2) { $v2=$p2; print; }
        	chomp; push(@cities, $_);
        
        	# default gscore and fscore
        	$gscore[$ln] = 99999;
        	$fscore[$ln] = 99999;
        }
        die("both cities must be valid\n") if (!$v1 || !$v2);
        close(K);
        open(R, "roads") || open(R, "roads.txt") || die("roads: $!\n");
        open(B, "out-B%") || die("out-B%: $!\n");
        @roads = ( undef ); while(&lt;R&gt;) { chomp; push(@roads, $_); }
        close(R);
        $ee = 0; while(&lt;B&gt;) {
        	chomp;
        	($rn, $c1, $c2, $d) = split(/\t/, $_);
        	$rn += 0; $c1 += 0; $c2 += 0; $d += 0;
        	next if (!$d || !$c1 || !$c2 || !$rn);
        
        	push(@edges, [ $rn, $c1, $c2, $d ]);
        	push(@{ $a[$c1] }, [ $rn, $c2, $d, $ee ]);
        	push(@{ $a[$c2] }, [ $rn, $c1, $d, $ee++ ]);
        }
        close(B);
        
        @camefrom = (); @openset = ( $v1 );
        $gscore[$v1] = 0;
        $fscore[$v1] = 0; # heuristic of distance is 0 for the start
        while(scalar(@openset)) {
        	@openset = sort { $fscore[$a] &lt;=&gt; $fscore[$b] } @openset;
            print join(", ", @openset), "\n";
        	$current = shift(@openset);
        	last if ($current == $v2);
        
        	foreach $n (@{ $a[$current] }) {
        		$ni = $n-&gt;[1];
        		$tgscore = $gscore[$current] + $n-&gt;[2];
        		if ($tgscore &lt; $gscore[$ni]) {
        			$camefrom[$ni] = $current;
        			$routefrom[$ni] = $n-&gt;[3];
        			$gscore[$ni] = $tgscore;
        			$fscore[$ni] = $tgscore + 0; # "heuristic"
        			unless (scalar(grep { $_ == $ni } @openset)) {
        				push(@openset, $ni);
        			}
        		}
        	}
        }
        
        @s = ( ); while(defined($camefrom[$current])) {
        	$route = $routefrom[$current];
        	$current = $camefrom[$current];
        	unshift(@s, $route);
        }
        print join(' - ', @s), "\n";
        $miles = 0; foreach(@s) {
                print $roads[$edges[$_]-&gt;[0]], "($edges[$_]-&gt;[0]) - ",
                        $cities[$edges[$_]-&gt;[2]], "($edges[$_]-&gt;[2]) - ",
                        $cities[$edges[$_]-&gt;[1]], "($edges[$_]-&gt;[1]) ",
                        $edges[$_]-&gt;[3], " miles\n";
                $miles += $edges[$_]-&gt;[3];
        }
        print "total $miles miles\n";
        </pre></div>
        <p>
        This is our A-star implementation using zero as the heuristic. You'll notice that much of the code is the same as the Dijkstra implementation. The key difference is that A-star tracks two functions, <i>f(x)</i> (realized here as <tt>@fscore</tt>) and <i>g(x)</i> (<tt>@gscore</tt>). The G-score for a given node is the currently known cost of the cheapest path from the start to that node, which we build from the mile length of each edge. The node's F-score is its G-score plus the value of the heuristic function for that node, representing our best guess as to how cheap the overall path could be if the path from start to finish goes through it. In this case, the F-score and G-score will be identical because the heuristic function in this implementation always equals zero. Also, because we're interested in knowing how many fewer nodes we've considered, we dump the open set on every iteration.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjnRaJZlcjEBeU4NRKLY035VZR29sNnuebV7qktGjV9t89KnGpxEwyZXBolzFDTf0mBJx6YqeUNfE1y98utLEjHKdkywuZ0z3RGTW6dYWYBfbm95a99k3K4Ar7-Guq3V-H3DE0r_pBt8P2H6EXm0PcsyWbpKzUU3ZIq5XZJJw2hhqXGq1IMNf1QferS2jM/s1152/big-vice-screen-2025081721460132.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjnRaJZlcjEBeU4NRKLY035VZR29sNnuebV7qktGjV9t89KnGpxEwyZXBolzFDTf0mBJx6YqeUNfE1y98utLEjHKdkywuZ0z3RGTW6dYWYBfbm95a99k3K4Ar7-Guq3V-H3DE0r_pBt8P2H6EXm0PcsyWbpKzUU3ZIq5XZJJw2hhqXGq1IMNf1QferS2jM/s320/big-vice-screen-2025081721460132.png"/></a></div>
        
        <div class="tx"><pre>
        % route-dij 375 311
        NEEDLES CA 
        SAN BERNARDINO CA 
        237 - 236 - 63 - 719
        I 15  - SAN BERNARDINO CA  - US395/I15 CA  27 miles
        I 15  - US395/I15 CA  - BARSTOW CA  44 miles
        I 40  - BARSTOW CA  - I40/US95 CA  134 miles
        I 40  - I40/US95 CA  - NEEDLES CA  12 miles
        total 217 miles
        % route-astar 375 311
        NEEDLES CA 
        SAN BERNARDINO CA 
        375
        443, 335, 274, 376
        335, 274, 442, 18, 376
        274, 442, 18, 376, 34
        442, 18, 376, 171, 380, 34
        18, 376, 171, 380, 15, 34, 31
        376, 171, 380, 15, 34, 169, 262, 31
        424, 171, 380, 15, 34, 169, 262, 31, 487
        171, 380, 15, 34, 169, 262, 31, 487
        380, 15, 34, 169, 275, 262, 31, 487
        15, 34, 169, 275, 262, 31, 379, 487
        34, 45, 169, 275, 262, 31, 379, 487
        45, 169, 275, 262, 31, 379, 311, 487, 342
        169, 275, 262, 31, 379, 311, 119, 487, 342
        275, 311, 262, 31, 379, 119, 487, 342
        311, 262, 31, 379, 336, 119, 487, 170, 342
        237 - 236 - 63 - 719
        I 15 (31) - SAN BERNARDINO CA (375) - US395/I15 CA (443) 27 miles
        I 15 (31) - US395/I15 CA (443) - BARSTOW CA (18) 44 miles
        I 40 (60) - BARSTOW CA (18) - I40/US95 CA (169) 134 miles
        I 40 (60) - I40/US95 CA (169) - NEEDLES CA (311) 12 miles
        total 217 miles
        % route-astar 311 375
        NEEDLES CA 
        SAN BERNARDINO CA 
        311
        169, 251, 34
        251, 34, 262, 18
        168, 34, 262, 18
        34, 262, 18, 475, 110
        262, 18, 475, 110, 335, 342
        454, 18, 475, 110, 335, 342, 427
        18, 475, 110, 335, 342, 53, 427, 446
        442, 443, 475, 110, 335, 342, 53, 427, 446
        443, 475, 110, 335, 342, 15, 53, 427, 31, 446
        475, 110, 375, 335, 342, 15, 53, 427, 31, 446
        110, 375, 335, 342, 15, 53, 427, 31, 446
        375, 335, 342, 15, 53, 427, 31, 446, 124, 247
        719 - 63 - 236 - 237
        I 40 (60) - I40/US95 CA (169) - NEEDLES CA (311) 12 miles
        I 40 (60) - BARSTOW CA (18) - I40/US95 CA (169) 134 miles
        I 15 (31) - US395/I15 CA (443) - BARSTOW CA (18) 44 miles
        I 15 (31) - SAN BERNARDINO CA (375) - US395/I15 CA (443) 27 miles
        total 217 miles
        </pre></div>
        <p>
        Although our queue dump shows we do wander a bit afield (a number of these nodes are more than one junction away, like 487 corresponding to Yuma, Arizona, or 380 being Santa Barbara, California), this is a much smaller set of nodes to consider than Djikstra and we still get the same answer, which Roadsearch also gets. Because we've observed Roadsearch seems to run the route backwards, I've provided the A-star dumps for both directions and you can see this simulation expands the set beyond the nearest neighbour in both cases.
        <p>
        Since we know the path must be constructed within the existing arrays and we have good evidence based on the "infinite" 32766 values that this storage array must be <tt>N%()</tt>, we'll instruct VICE to trap each integer array write to the range covered by <tt>MATS</tt>. (Trapping reads would also be handy but we'd go mad with the amount of data this generates.) We can get the value being written from $64/$65 (using the BASIC #1 floating point accumulator as temporary space) based on this code in the RTL:
        <p>
        <div class="tx"><pre>
        .C:b094  A5 64       LDA $64
        .C:b096  91 49       STA ($49),Y
        .C:b098  C8          INY
        .C:b099  A5 65       LDA $65
        .C:b09b  91 49       STA ($49),Y
        .C:b09d  4C 90 A0    JMP $A090
        </pre></div>
        <p>
        On each store we'll duly log the value in $64/$65 (remember it's big-endian) and the address it's being stored to. I wrote a one-off script to turn this string of writes into array offsets so we can understand how they relate to <tt>N%()</tt>, and then look them up in the tables so that we know which node and edge is under consideration. Remember, Roadsearch works this problem <em>backwards</em> starting with Needles.
        <p>
        <div class="tx"><pre>
        # San Bernardino 375 to Needles 311
        
        2e8e: 00 a8	N%(311,0)=168	NEEDLES CA 
        2e8e: 00 a8	N%(311,0)=168	NEEDLES CA 
        3478: 00 00	N%(311,1)=0	NEEDLES CA 
        4636: 00 00	N%(311,4)=0	NEEDLES CA 	&lt;destination&gt;
        3a62: 00 a8	N%(311,2)=168	NEEDLES CA 
        404c: 00 01	N%(311,3)=1	NEEDLES CA 
        
        2e16: 00 cf	N%(251,0)=207	KINGMAN AZ 
        2e16: 00 cf	N%(251,0)=207	KINGMAN AZ 
        3400: 7f fe	N%(251,1)=32766	KINGMAN AZ 
        3400: 00 3c	N%(251,1)=60	KINGMAN AZ 
        39ea: 01 0b	N%(251,2)=267	KINGMAN AZ 
        45be: 00 3f	N%(251,4)=63	KINGMAN AZ  to NEEDLES CA  (60 miles) via I 40 
        2c64: 00 a5	N%(34,0)=165	BLYTHE CA 
        2c64: 00 a5	N%(34,0)=165	BLYTHE CA 
        324e: 7f fe	N%(34,1)=32766	BLYTHE CA 
        324e: 00 63	N%(34,1)=99	BLYTHE CA 
        3838: 01 08	N%(34,2)=264	BLYTHE CA 
        440c: 02 3c	N%(34,4)=572	NEEDLES CA  to BLYTHE CA  (99 miles) via US 95 
        2d72: 00 9d	N%(169,0)=157	I40/US95 CA 
        2d72: 00 9d	N%(169,0)=157	I40/US95 CA 
        335c: 7f fe	N%(169,1)=32766	I40/US95 CA 
        335c: 00 0c	N%(169,1)=12	I40/US95 CA 
        3946: 00 a9	N%(169,2)=169	I40/US95 CA 
        451a: 02 d0	N%(169,4)=720	NEEDLES CA  to I40/US95 CA  (12 miles) via I 40 
        3f30: 00 02	N%(169,3)=2	I40/US95 CA 
        
        2c44: 00 3b	N%(18,0)=59	BARSTOW CA 
        2c44: 00 3b	N%(18,0)=59	BARSTOW CA 
        322e: 7f fe	N%(18,1)=32766	BARSTOW CA 
        322e: 00 92	N%(18,1)=146	BARSTOW CA 
        3818: 00 cd	N%(18,2)=205	BARSTOW CA 
        43ec: 00 40	N%(18,4)=64	I40/US95 CA  to BARSTOW CA  (134 miles) via I 40 
        2e2c: 00 c3	N%(262,0)=195	LAS VEGAS NV 
        2e2c: 00 c3	N%(262,0)=195	LAS VEGAS NV 
        3416: 7f fe	N%(262,1)=32766	LAS VEGAS NV 
        3416: 00 6d	N%(262,1)=109	LAS VEGAS NV 
        3a00: 01 30	N%(262,2)=304	LAS VEGAS NV 
        45d4: 02 3b	N%(262,4)=571	LAS VEGAS NV  to I40/US95 CA  (97 miles) via US 95 
        3e02: 00 03	N%(18,3)=3	BARSTOW CA 
        
        2f96: 00 16	N%(443,0)=22	US395/I15 CA 
        2f96: 00 16	N%(443,0)=22	US395/I15 CA 
        3580: 7f fe	N%(443,1)=32766	US395/I15 CA 
        3580: 00 be	N%(443,1)=190	US395/I15 CA 
        3b6a: 00 d4	N%(443,2)=212	US395/I15 CA 
        473e: 00 ed	N%(443,4)=237	BARSTOW CA  to US395/I15 CA  (44 miles) via I 15 
        2f94: 00 42	N%(442,0)=66	US395/CA58 CA 
        2f94: 00 42	N%(442,0)=66	US395/CA58 CA 
        357e: 7f fe	N%(442,1)=32766	US395/CA58 CA 
        357e: 00 b2	N%(442,1)=178	US395/CA58 CA 
        3b68: 00 f4	N%(442,2)=244	US395/CA58 CA 
        473c: 02 0d	N%(442,4)=525	US395/CA58 CA  to BARSTOW CA  (32 miles) via CA 58 
        4154: 00 04	N%(443,3)=4	US395/I15 CA 
        
        2f0e: 00 00	N%(375,0)=0	SAN BERNARDINO CA 
        2f0e: 00 00	N%(375,0)=0	SAN BERNARDINO CA 
        34f8: 7f fe	N%(375,1)=32766	SAN BERNARDINO CA 
        34f8: 00 d9	N%(375,1)=217	SAN BERNARDINO CA 
        3ae2: 00 d9	N%(375,2)=217	SAN BERNARDINO CA 
        46b6: 00 ee	N%(375,4)=238	US395/I15 CA  to SAN BERNARDINO CA  (27 miles) via I 15 
        </pre></div>
        <p>
        From the above you can see where the program marks the order of each node and the accumulated mileage. Our running totals, most likely the F-score and G-score, for a given node <tt>x</tt> are in <tt>N%(x,1)</tt> and <tt>N%(x,2)</tt>, the length of the candidate edge is in <tt>N%(x,1)</tt>, the optimal edge for the node is in <tt>N%(x,4)</tt>, and the iteration it was marked in is recorded in <tt>N%(x,3)</tt>. (We count an iteration as any loop in which a candidate node is marked, which in this simple example will occur on every run through the open set.) <tt>N%(x,0)</tt> also looks like a distance, but it doesn't correlate to a highway distance. To construct the itinerary at the end, it starts with San Bernardino and then repeatedly walks the selected edge to the next node until it reaches Needles.
        <p>
        It's painfully obvious that compared to our models Roadsearch is considering a much smaller number of nodes (18, 34, 169, 251, 262, 311, 375, 442 and 443), counting the five in the optimal solution, and it duly converges on the optimal routing in just four iterations compared to <em>twelve</em> in our <em>best</em> case. I did look at its read pattern and found that <tt>N%(x,0)</tt> and <tt>N%(x,1)</tt> lit up a <em>lot</em> before they are later overwritten. These values are clearly important to computing whatever heuristic it's using, so I pulled out a few from across North America.
        <p>
        <div class="tx"><pre>
        San Diego, CA       5710  20447
        Bangor, ME          7820  12003
        San Bernardino, CA  5952  20472
        Bellingham, WA      8510  21375
        Miami, FL           4499  13996
        Medicine Hat, AB    8740  19313
        Salina, KS          6779  17036
        </pre></div>
        <p>
        I stared at it for awhile until it dawned on me what the numbers are. Do you see what I saw? Here, let me plot these locations on a Mercator projection for you (using the United States' territorial boundaries):
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhlVX8evF6nIMl8GcBi__069SPYNQS3FI5LSQ0JeRtqgZh9V-OqTS0daTfzKYASKYDC_IDhuzOfmLyQOBoO7MrKmqgx6skG-_1lAVCHmsFOQfaEizp-xS9QR45whUwRy3spVxi5u-Z7RNF2_5BEqHdYj7Y11Fj4hLGsb44J2gmrFJym4d0FYZg0OHTnfac/s1650/lemmeplotit.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="876" data-original-width="1650" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhlVX8evF6nIMl8GcBi__069SPYNQS3FI5LSQ0JeRtqgZh9V-OqTS0daTfzKYASKYDC_IDhuzOfmLyQOBoO7MrKmqgx6skG-_1lAVCHmsFOQfaEizp-xS9QR45whUwRy3spVxi5u-Z7RNF2_5BEqHdYj7Y11Fj4hLGsb44J2gmrFJym4d0FYZg0OHTnfac/s320/lemmeplotit.png"/></a></div>
        
        The values are <em>coordinates</em>. The first column increases going north, and the second column increases going west. Indeed, in the very paper written by Hart et al., they suggest that the straight-line distance from the current node to the goal would make a dandy heuristic and now we can compute it!
        <p>
        The thing we have to watch for here is that the scales of the mileage and the coordinates are not identical, and if we use a simple distance calculation we'll end up clobbering the cumulative mileage with it &mdash; which would not only make it non-admissible as a heuristic, but also give us the wrong answer. To avoid that, we'll compute a fudge factor to yield miles from "map units" and keep the heuristic function at the same scale. Let's take San Diego, California to Bangor, Maine as a reference standard, for which <a href="https://link.springer.com/article/10.1007/s00190-012-0578-z">computing the geodesic distance</a> using <a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a> yields 2,696.83 miles from city centre to city centre as the crow flies. If we compute the straight-line distance between them using the coordinates above, we get 8703.63 "map units," which is a ratio of 3.23:1. To wit:
        <p>
        <div class="tx"><pre>
        #!/usr/bin/perl
        
        # divisor for distance
        # if this is too low, it will overwhelm the mile distance to the goal
        # computed from real-world straight-line distances
        $fudge = 3.23;
        
        # compute distance from target
        sub h { my $xx = shift; my $yy = shift; $xx -= $vx; $yy -= $vy;
        	return sqrt(($xx*$xx)+($yy*$yy)); }
        
        die("usage: $0 point_no_1 point_no_2\n") if (scalar(@ARGV) != 2);
        $p1 = $ARGV[0]; $p2 = $ARGV[1];
        die("wherever you go there you are\n") if ($p1 == $p2);
        
        open(K, "cities") || open(K, "cities.txt") || die("cities: $!\n");
        $ln = 0; @cities = ( undef ); while(&lt;K&gt;) {
        	$ln++;
        	if ($ln==$p1) { $v1=$p1; print; }
        	if ($ln==$p2) { $v2=$p2; print; }
        	chomp; push(@cities, $_);
        	# gscore and fscore set up from out-N%
        }
        die("both cities must be valid\n") if (!$v1 || !$v2);
        close(K);
        open(R, "roads") || open(R, "roads.txt") || die("roads: $!\n");
        open(B, "out-B%") || die("out-B%: $!\n");
        @roads = ( undef ); while(&lt;R&gt;) { chomp; push(@roads, $_); }
        close(R);
        $ee = 0; while(&lt;B&gt;) {
        	chomp;
        	($rn, $c1, $c2, $d) = split(/\t/, $_);
        	$rn += 0; $c1 += 0; $c2 += 0; $d += 0;
        	next if (!$d || !$c1 || !$c2 || !$rn);
        
        	push(@edges, [ $rn, $c1, $c2, $d ]);
        	push(@{ $a[$c1] }, [ $rn, $c2, $d, $ee ]);
        	push(@{ $a[$c2] }, [ $rn, $c1, $d, $ee++ ]);
        }
        close(B);
        open(N, "out-N%") || die("out-N%: $!\n");
        $ln = 0; while(&lt;N&gt;) {
        	chomp;
        	# order and edge not used
        	($x[$ln], $y[$ln], $fscore[$ln], $order, $edge) = split(/\t/, $_);
        	# default gscore and fscore
        	$gscore[$ln] = $fscore[$ln];
        	$ln++;
        }
        close(N); $vx = $x[$v2]; $vy = $y[$v2];
        
        @camefrom = (); @openset = ( $v1 );
        $gscore[$v1] = 0;
        $fscore[$v1] = 0; # heuristic of distance is 0 for the start
        
        while(scalar(@openset)) {
        	@openset = sort { $fscore[$a] &lt;=&gt; $fscore[$b] } @openset;
        	print join(", ", @openset), "\n";
        	$current = shift(@openset);
        	last if ($current == $v2);
        
        	foreach $n (@{ $a[$current] }) {
        		$ni = $n-&gt;[1];
        		$tgscore = $gscore[$current] + $n-&gt;[2];
        		if ($tgscore &lt; $gscore[$ni]) {
        			$camefrom[$ni] = $current;
        			$routefrom[$ni] = $n-&gt;[3];
        			$gscore[$ni] = $tgscore;
        			$h = &amp;h($x[$ni], $y[$ni]) / $fudge;
        			$fscore[$ni] = $tgscore + $h;
        			unless (scalar(grep { $_ == $ni } @openset)) {
        				push(@openset, $ni);
        			}
        		}
        	}
        }
        
        @s = ( ); while(defined($camefrom[$current])) {
        	$route = $routefrom[$current];
        	$current = $camefrom[$current];
        	unshift(@s, $route);
        }
        print join(' - ', @s), "\n";
        $miles = 0; foreach(@s) {
        	print $roads[$edges[$_]-&gt;[0]], "($edges[$_]-&gt;[0]) - ",
        		$cities[$edges[$_]-&gt;[2]], "($edges[$_]-&gt;[2]) - ",
        		$cities[$edges[$_]-&gt;[1]], "($edges[$_]-&gt;[1]) ",
        		$edges[$_]-&gt;[3], " miles\n";
                $miles += $edges[$_]-&gt;[3];
        }
        print "total $miles miles\n";
        </pre></div>
        <p>
        We now have implemented an <tt>h(x)</tt> that for a given node <tt>x</tt> returns its straight-line distance from the target node. Let's try it out.
        <p>
        <div class="tx"><pre>
        % route-hastar 375 311
        NEEDLES CA 
        SAN BERNARDINO CA 
        375
        335, 443, 274, 376
        443, 34, 274, 376
        18, 442, 34, 274, 376
        169, 442, 34, 274, 376, 262
        311, 442, 34, 274, 376, 262
        237 - 236 - 63 - 719
        I 15 (31) - SAN BERNARDINO CA (375) - US395/I15 CA (443) 27 miles
        I 15 (31) - US395/I15 CA (443) - BARSTOW CA (18) 44 miles
        I 40 (60) - BARSTOW CA (18) - I40/US95 CA (169) 134 miles
        I 40 (60) - I40/US95 CA (169) - NEEDLES CA (311) 12 miles
        total 217 miles
        % route-hastar 311 375
        NEEDLES CA 
        SAN BERNARDINO CA 
        311
        169, 251, 34
        18, 251, 34, 262
        443, 442, 251, 34, 262
        375, 442, 251, 34, 262
        719 - 63 - 236 - 237
        I 40 (60) - I40/US95 CA (169) - NEEDLES CA (311) 12 miles
        I 40 (60) - BARSTOW CA (18) - I40/US95 CA (169) 134 miles
        I 15 (31) - US395/I15 CA (443) - BARSTOW CA (18) 44 miles
        I 15 (31) - SAN BERNARDINO CA (375) - US395/I15 CA (443) 27 miles
        total 217 miles
        </pre></div>
        <p>
        Remembering that Roadsearch works it backwards, we converge on the same solution examining the same nodes in the same number of iterations (four). Further proof is if we dump the program's array writes for the opposite direction:
        <p>
        <div class="tx"><pre>
        # Needles 311 to San Bernardino 375
        
        2f0e: 00 a8	N%(375,0)=168	SAN BERNARDINO CA 
        2f0e: 00 a8	N%(375,0)=168	SAN BERNARDINO CA 
        34f8: 00 00	N%(375,1)=0	SAN BERNARDINO CA 
        46b6: 00 00	N%(375,4)=0	SAN BERNARDINO CA 	&lt;destination&gt;
        3ae2: 00 a8	N%(375,2)=168	SAN BERNARDINO CA 
        40cc: 00 01	N%(375,3)=1	SAN BERNARDINO CA 
        
        2ebe: 00 87	N%(335,0)=135	PALM SPRINGS CA 
        2ebe: 00 87	N%(335,0)=135	PALM SPRINGS CA 
        34a8: 7f fe	N%(335,1)=32766	PALM SPRINGS CA 
        34a8: 00 30	N%(335,1)=48	PALM SPRINGS CA 
        3a92: 00 b7	N%(335,2)=183	PALM SPRINGS CA 
        4666: 00 16	N%(335,4)=22	PALM SPRINGS CA  to SAN BERNARDINO CA  (48 miles) via I 10 
        2e44: 00 de	N%(274,0)=222	LOS ANGELES CA 
        2e44: 00 de	N%(274,0)=222	LOS ANGELES CA 
        342e: 7f fe	N%(274,1)=32766	LOS ANGELES CA 
        342e: 00 40	N%(274,1)=64	LOS ANGELES CA 
        3a18: 01 1e	N%(274,2)=286	LOS ANGELES CA 
        45ec: 00 17	N%(274,4)=23	SAN BERNARDINO CA  to LOS ANGELES CA  (64 miles) via I 10 
        2f96: 00 a6	N%(443,0)=166	US395/I15 CA 
        2f96: 00 a6	N%(443,0)=166	US395/I15 CA 
        3580: 7f fe	N%(443,1)=32766	US395/I15 CA 
        3580: 00 1b	N%(443,1)=27	US395/I15 CA 
        3b6a: 00 c1	N%(443,2)=193	US395/I15 CA 
        473e: 00 ee	N%(443,4)=238	US395/I15 CA  to SAN BERNARDINO CA  (27 miles) via I 15 
        2f10: 00 d7	N%(376,0)=215	SAN DIEGO CA 
        2f10: 00 d7	N%(376,0)=215	SAN DIEGO CA 
        34fa: 7f fe	N%(376,1)=32766	SAN DIEGO CA 
        34fa: 00 6d	N%(376,1)=109	SAN DIEGO CA 
        3ae4: 01 44	N%(376,2)=324	SAN DIEGO CA 
        46b8: 00 ef	N%(376,4)=239	SAN BERNARDINO CA  to SAN DIEGO CA  (109 miles) via I 15 
        407c: 00 02	N%(335,3)=2	PALM SPRINGS CA 
        
        2c64: 00 58	N%(34,0)=88	BLYTHE CA 
        2c64: 00 58	N%(34,0)=88	BLYTHE CA 
        324e: 7f fe	N%(34,1)=32766	BLYTHE CA 
        324e: 00 ad	N%(34,1)=173	BLYTHE CA 
        3838: 01 05	N%(34,2)=261	BLYTHE CA 
        440c: 00 15	N%(34,4)=21	BLYTHE CA  to PALM SPRINGS CA  (125 miles) via I 10 
        4154: 00 03	N%(443,3)=3	US395/I15 CA 
        
        2c44: 00 8e	N%(18,0)=142	BARSTOW CA 
        2c44: 00 8e	N%(18,0)=142	BARSTOW CA 
        322e: 7f fe	N%(18,1)=32766	BARSTOW CA 
        322e: 00 47	N%(18,1)=71	BARSTOW CA 
        3818: 00 d5	N%(18,2)=213	BARSTOW CA 
        43ec: 00 ed	N%(18,4)=237	BARSTOW CA  to US395/I15 CA  (44 miles) via I 15 
        2f94: 00 ac	N%(442,0)=172	US395/CA58 CA 
        2f94: 00 ac	N%(442,0)=172	US395/CA58 CA 
        357e: 7f fe	N%(442,1)=32766	US395/CA58 CA 
        357e: 00 45	N%(442,1)=69	US395/CA58 CA 
        3b68: 00 f1	N%(442,2)=241	US395/CA58 CA 
        473c: 01 92	N%(442,4)=402	US395/CA58 CA  to US395/I15 CA  (42 miles) via US 395 
        3e02: 00 04	N%(18,3)=4	BARSTOW CA 
        
        2d72: 00 0b	N%(169,0)=11	I40/US95 CA 
        2d72: 00 0b	N%(169,0)=11	I40/US95 CA 
        335c: 7f fe	N%(169,1)=32766	I40/US95 CA 
        335c: 00 cd	N%(169,1)=205	I40/US95 CA 
        3946: 00 d8	N%(169,2)=216	I40/US95 CA 
        451a: 00 40	N%(169,4)=64	I40/US95 CA  to BARSTOW CA  (134 miles) via I 40 
        2e2c: 00 64	N%(262,0)=100	LAS VEGAS NV 
        2e2c: 00 64	N%(262,0)=100	LAS VEGAS NV 
        3416: 7f fe	N%(262,1)=32766	LAS VEGAS NV 
        3416: 00 e3	N%(262,1)=227	LAS VEGAS NV 
        3a00: 01 47	N%(262,2)=327	LAS VEGAS NV 
        45d4: 00 ec	N%(262,4)=236	LAS VEGAS NV  to BARSTOW CA  (156 miles) via I 15 
        3f30: 00 05	N%(169,3)=5	I40/US95 CA 
        
        2e8e: 00 00	N%(311,0)=0	NEEDLES CA 
        2e8e: 00 00	N%(311,0)=0	NEEDLES CA 
        3478: 7f fe	N%(311,1)=32766	NEEDLES CA 
        3478: 00 d9	N%(311,1)=217	NEEDLES CA 
        3a62: 00 d9	N%(311,2)=217	NEEDLES CA 
        4636: 02 d0	N%(311,4)=720	NEEDLES CA  to I40/US95 CA  (12 miles) via I 40 
        </pre></div>
        <p>
        This routing proceeds in six iterations, just as we do, and once again the nodes we end up considering in our new A-star model are also the same. It also explains <tt>N%(x,0)</tt> &mdash; this is the straight-line distance and thus our heuristic, calculated (it's backwards) as the distance to the "start." For example, Palm Springs is indeed roughly 135 miles from Needles as the crow flies, again depending on your exact termini, whereas the western US 95/Interstate 40 junction is only about 11 miles. Note that this process overwrites the coordinate information, but we only needed it to compute the estimate; since we reload <tt>MATS</tt> entirely anyway after the user exits routing, it doesn't cause a problem.
        <p>
        It should also be obvious that this "fudge" divisor has a direct effect on the efficiency of the routine. While we're purportedly using it as a means to scale down the heuristic, doing so is actually just a backhanded way of deciding how strongly we want the heuristic weighted. However, we can't really appreciate its magnitude in a problem space this small, so now we'll throw it a big one: <em>drive</em> from San Diego (376) to Bangor (17). (I did myself drive from Bangor to San Diego in 2006, but via Georgia to visit relatives.)
        <p>
        This route requires a lot more computation and will also generate multiple useless cycles in which no node is sufficiently profitable, so I added code to our heuristic A-star router to explicitly count iterations only when a candidate node is marked:
        <p>
        <div class="tx"><pre>
        $iter = 0; while(scalar(@openset)) {
        	@openset = sort { $fscore[$a] &lt;=&gt; $fscore[$b] } @openset;
        	print join(", ", @openset), "\n";
        	$current = shift(@openset);
        	last if ($current == $v2);
        
        	$niter = $iter;
        	foreach $n (@{ $a[$current] }) {
        		$ni = $n-&gt;[1];
        		$tgscore = $gscore[$current] + $n-&gt;[2];
        		if ($tgscore &lt; $gscore[$ni]) {
        			$niter = $iter + 1;
        			$camefrom[$ni] = $current;
        			$routefrom[$ni] = $n-&gt;[3];
        			$gscore[$ni] = $tgscore;
        			$h = &amp;h($x[$ni], $y[$ni]) / $fudge;
        			$fscore[$ni] = $tgscore + $h;
        			unless (scalar(grep { $_ == $ni } @openset)) {
        				push(@openset, $ni);
        			}
        		}
        	}
        	$iter = $niter;
        }
        </pre></div>
        <p>
        With our computed initial fudge factor of 3.23, we get this (again, worked backwards):
        <p>
        <div class="tx"><pre>
        % route-hastar 17 376
        BANGOR ME 
        SAN DIEGO CA 
        17
        398, 469, 148
        469, 409, 354, 148
        [...]
        376, 100, 145, 239, 366, 318, 518, 66, 360, 461, 374, 121, 485, 274, 448, 346, 245, 125, 44, 419, 256, 445, 15, 134, 437, 526, 427, 31
        372 - 373 - 374 - 375 - 376 - 651 - 765 - 168 - 209 - 603 - 368 - 379 - 686 - 687 - 608 - 681 - 205 - 701 - 703 - 107 - 704 - 106 - 105 - 104 - 103 - 102 - 101 - 627 - 100 - 99 - 98 - 644 - 575 - 472 - 471 - 470 - 57 - 58 - 59 - 60 - 588 - 61 - 62 - 719 - 63 - 236 - 237 - 238
        I 95 (100) - WATERVILLE ME (469) - BANGOR ME (17) 59 miles
        I 95 (100) - AUGUSTA ME (12) - WATERVILLE ME (469) 23 miles
        I 95 (100) - PORTLAND ME (348) - AUGUSTA ME (12) 58 miles
        I 95 (100) - PORTSMOUTH NH (350) - PORTLAND ME (348) 49 miles
        I 95 (100) - I95/I93(N) MA (231) - PORTSMOUTH NH (350) 53 miles
        I 95 (100) - I90/I95 MA (216) - I95/I93(N) MA (231) 15 miles
        I 90 (96) - I90/I95 MA (216) - I90/I395 MA (214) 33 miles
        I 90 (96) - I90/I395 MA (214) - I86/I90 MA (209) 12 miles
        I 86 (92) - I86/I90 MA (209) - HARTFORD CT (143) 46 miles
        I 91 (97) - I91/CT9 CT (220) - HARTFORD CT (143) 12 miles
        I 91 (97) - NEW HAVEN CT (313) - I91/CT9 CT (220) 27 miles
        I 95 (100) - I95/I287 NY (223) - NEW HAVEN CT (313) 50 miles
        I 95 (100) - I95/I287 NY (223) - I95/I87/I487 NY (230) 20 miles
        I 478 (64) - I95/I87/I487 NY (230) - NEW YORK NY (315) 10 miles
        I 78 (83) - NEW YORK NY (315) - I95/I78 NJ (228) 10 miles
        I 78 (83) - I95/I78 NJ (228) - ALLENTOWN PA (6) 85 miles
        I 78 (83) - ALLENTOWN PA (6) - I78/I81 PA (191) 52 miles
        I 81 (87) - I78/I81 PA (191) - HARRISBURG PA (142) 23 miles
        I 76 (81) - BREEZEWOOD PA (38) - HARRISBURG PA (142) 81 miles
        I 70 (76) - BREEZEWOOD PA (38) - I70/I76(W) PA (182) 86 miles
        I 70 (76) - I70/I76(W) PA (182) - WASHINGTON PA (466) 42 miles
        I 70 (76) - WASHINGTON PA (466) - CAMBRIDGE OH (48) 77 miles
        I 70 (76) - CAMBRIDGE OH (48) - COLUMBUS OH (72) 79 miles
        I 70 (76) - COLUMBUS OH (72) - DAYTON OH (84) 71 miles
        I 70 (76) - DAYTON OH (84) - INDIANAPOLIS IN (235) 104 miles
        I 70 (76) - INDIANAPOLIS IN (235) - EFFINGHAM IL (97) 154 miles
        I 70 (76) - EFFINGHAM IL (97) - I70/I55 IL (180) 79 miles
        I 70 (76) - I70/I64 IL (181) - I70/I55 IL (180) 17 miles
        I 70 (76) - I70/I64 IL (181) - ST. LOUIS MO (410) 3 miles
        I 70 (76) - ST. LOUIS MO (410) - COLUMBIA MO (69) 125 miles
        I 70 (76) - COLUMBIA MO (69) - KANSAS CITY MO (248) 126 miles
        I 35 (52) - KANSAS CITY MO (248) - KS TPK/I35 KS (253) 113 miles
        KS TPK (113) - WICHITA KS (474) - KS TPK/I35 KS (253) 83 miles
        US 54 (176) - WICHITA KS (474) - PRATT KS (351) 78 miles
        US 54 (176) - PRATT KS (351) - LIBERAL KS (267) 132 miles
        US 54 (176) - LIBERAL KS (267) - TUCUMCARI NM (434) 208 miles
        I 40 (60) - SANTA ROSA NM (382) - TUCUMCARI NM (434) 59 miles
        I 40 (60) - ALBUQUERQUE NM (5) - SANTA ROSA NM (382) 115 miles
        I 40 (60) - GALLUP NM (124) - ALBUQUERQUE NM (5) 139 miles
        I 40 (60) - FLAGSTAFF AZ (110) - GALLUP NM (124) 184 miles
        I 40 (60) - I40/US93 AZ (168) - FLAGSTAFF AZ (110) 123 miles
        I 40 (60) - KINGMAN AZ (251) - I40/US93 AZ (168) 23 miles
        I 40 (60) - NEEDLES CA (311) - KINGMAN AZ (251) 60 miles
        I 40 (60) - I40/US95 CA (169) - NEEDLES CA (311) 12 miles
        I 40 (60) - BARSTOW CA (18) - I40/US95 CA (169) 134 miles
        I 15 (31) - US395/I15 CA (443) - BARSTOW CA (18) 44 miles
        I 15 (31) - SAN BERNARDINO CA (375) - US395/I15 CA (443) 27 miles
        I 15 (31) - SAN DIEGO CA (376) - SAN BERNARDINO CA (375) 109 miles
        total 3324 miles in 328 iterations
        </pre></div>
        <p>
        And now for the real thing.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9E8jGIS9rPzkBxId4RSXMVM738axJBUM_sxWVbOB_JsAf27qCrkVwjebhTeLvpkOEOdzhqTYkERhY_wzG6Y0dsaJtWZZJ70QdDatcfBTOEYOzcVD63gvezGXgyGtq5cC50W77BOl7_Vp3mrS5zgOgwvPlRJtbMnLhf7cnXcD1aW9ydadTEIXZ-hprXDE/s1152/big-vice-screen-2025081822395464.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9E8jGIS9rPzkBxId4RSXMVM738axJBUM_sxWVbOB_JsAf27qCrkVwjebhTeLvpkOEOdzhqTYkERhY_wzG6Y0dsaJtWZZJ70QdDatcfBTOEYOzcVD63gvezGXgyGtq5cC50W77BOl7_Vp3mrS5zgOgwvPlRJtbMnLhf7cnXcD1aW9ydadTEIXZ-hprXDE/s320/big-vice-screen-2025081822395464.png"/></a></div>
        
        This was not a quick process.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh4tyRJbpXqcRtUDMsEuGpJoQ3pkKPv3rxfhmnNToWWJ4ouvxRZufi5rl0xhBH1kGNSfT0tHAUukHoNkV23NLo9iZOFtcONauhYIcQi032qg8rrA-h4ioKdyawUzeJzCUNB4wPo56shfMqqbRDC_vWbBgf_Ta3FAAlXYCqGdGb3SMe38MxATwKNDuHy73E/s4080/PXL_20250822_210044832.jpg" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh4tyRJbpXqcRtUDMsEuGpJoQ3pkKPv3rxfhmnNToWWJ4ouvxRZufi5rl0xhBH1kGNSfT0tHAUukHoNkV23NLo9iZOFtcONauhYIcQi032qg8rrA-h4ioKdyawUzeJzCUNB4wPo56shfMqqbRDC_vWbBgf_Ta3FAAlXYCqGdGb3SMe38MxATwKNDuHy73E/s320/PXL_20250822_210044832.jpg"/></a></div>
        
        I did run on it on the 128DCR for yuks as well as the emulated SuperCPU. With my stopwatch, a whole lot of patience and something else to do, it took 36 minutes and 44 seconds &mdash; which, when you think about everything it has to juggle, is actually remarkably <em>quick</em>. Both our simulation and the real program agree on the optimal route, as demonstrated by the cumulative mileage.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhEGlVQyMIXutEJ6-OshyphenhyphenXUzeJAkw9l5ohQvKdC_ChXNsHi-BERKmTL01_We8Xo4b-4E7DyJjW3XieAoQ16gdmWSfQ1Incc2BhV-YFUtmCbUaTZJn9ZchTzcplva5qSlVZZohmLqDCgB4cZ1tsuIFVMR0rvFHFhGlh2mk62Z2tnomRnOKvCopyJzXMjuP0/s1152/big-vice-screen-2025081909301723.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhEGlVQyMIXutEJ6-OshyphenhyphenXUzeJAkw9l5ohQvKdC_ChXNsHi-BERKmTL01_We8Xo4b-4E7DyJjW3XieAoQ16gdmWSfQ1Incc2BhV-YFUtmCbUaTZJn9ZchTzcplva5qSlVZZohmLqDCgB4cZ1tsuIFVMR0rvFHFhGlh2mk62Z2tnomRnOKvCopyJzXMjuP0/s320/big-vice-screen-2025081909301723.png"/></a></div>
        
        If we're doing the same (or at least overall similar) work as the native version, then we should observe the same maximum iterations marked in <tt>N%(x,3)</tt>. Interestingly, we do not: our simulation converged on the optimal route in 328 iterations, but the Commodore got it in 307. However, if we tune our simulation's fudge factor to 3.03, we also get it in 307.
        <p>
        Is there an optimal fudge divisor? We know the optimal route, so we'll run a whole bunch of simulations over the entire interval, rejecting ones that get the wrong answer and noting the iterations that were required for the right ones. In fact, we can do this generally for any routing by using the longhand Dijkstra method to get the correct answer and then run a whole bunch of tweaked A-stars compared with its routing after that.
        <p>
        In our simulation, stepping the fudge divisor over the interval from 0 inclusive to 4 by 0.001 increments, I ran six long haul drives in total, San Diego (376) to Bangor (17) and back, Bellingham, WA (24) to Miami, FL (291) and back, and then San Francisco, CA (377) to Washington, DC (465) and back. I then plotted them all out as curves.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh-oLHkPM_O9WkW8r4A3B-S_EGTsgnQM9wNvMZmEBxR0V_PVDvgEkVtJfgo2upi_2hepLOiDQ2OFx56yw3OSVgyIwSoI_D6JoNvoeGLSU_lwO4F8ZBcXTOE9uUYMLP_hOBljnZ_UOqo1v1ZDi_ZNoB1Sd77Z68CW-CDvUZJ8MVxM8AWHWLeqqqateHwKSw/s3785/fudgefactoring.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="2090" data-original-width="3785" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh-oLHkPM_O9WkW8r4A3B-S_EGTsgnQM9wNvMZmEBxR0V_PVDvgEkVtJfgo2upi_2hepLOiDQ2OFx56yw3OSVgyIwSoI_D6JoNvoeGLSU_lwO4F8ZBcXTOE9uUYMLP_hOBljnZ_UOqo1v1ZDi_ZNoB1Sd77Z68CW-CDvUZJ8MVxM8AWHWLeqqqateHwKSw/s320/fudgefactoring.png"/></a></div>
        
        The X-axis is the fudge divisor and the Y-axis is the number of iterations where lower is of course better. The zero deserves explanation: since you can't divide by zero, I made that the <tt>h(x)=0</tt> heuristic from above, which is always accurate and the least goal directed (and consequently requires the most iterations).
        <p>
        First off, there is no single fudge divisor that always yields the most optimal route for all of our test cases. Notice how much of the graph yields absolutely wrong answers (so nothing is plotted), and even in the interval between around 2.2 and 2.8 or so not all of the curves are valid. They all become valid around 3, which I enlarged in the inset on the left, and each one's iteration count slowly rises after that with the zero heuristic as more or less the upper asymptote. Except for the purple curve, however, 3 is not generally their lower bound.
        <p>
        Second, there is no single fudge divisor that always corresponds to the program's iteration count, which is 311 (17 to 376), 307 (376 to 17), 183 (291 to 24), 264 (24 to 291), 261 (377 to 465) and 220 (465 to 377). With the value of 3.03 from above, however, our simulation generally does <em>better</em> than the real thing, which is both gratifying for the purposes of pathfinding and frustrating for the purposes of modeling.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiPUdbFIk7ii46HlkwfXM-4dj99tpkNym5wJkWccqvMjg1j6eFqHcjYkgVzn9l6swjS-upBTIgl1W5xi5iVXGA2s62Rx1gJeufX2Lf5CZgpbniTkQhfMc377xi2RBCJg4RjJdx7ehZPX5bqPG3mHibwF_9IWW45xFatCx6MS6tvK6SX6L8vVQlDw1BBVr8/s1152/big-vice-screen-2025081920082920.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiPUdbFIk7ii46HlkwfXM-4dj99tpkNym5wJkWccqvMjg1j6eFqHcjYkgVzn9l6swjS-upBTIgl1W5xi5iVXGA2s62Rx1gJeufX2Lf5CZgpbniTkQhfMc377xi2RBCJg4RjJdx7ehZPX5bqPG3mHibwF_9IWW45xFatCx6MS6tvK6SX6L8vVQlDw1BBVr8/s320/big-vice-screen-2025081920082920.png"/></a></div>
        
        I did some quick distribution scans (well, it was quick in the SuperCPU emulator with warp on, anyway) to make sure there were no multiples or skipped numbers when it marked an iteration. Other than zero, which I put in there as a check that my BASIC one-liner was correct, no numbers are skipped and no iteration number appears more than once.
        <p>
        So my best guess for why they don't match up is mathematical precision. We're much more precise than the native Commodore version &mdash; we already know we're truncating values by storing them into an integer array, and rather than an expensive square root the distance heuristic is probably a quick estimate that gets worse at longer distances. (For that matter, the "fudge" divisor is very likely a straight-up three and the remainder is tossed.) Our short routes lined up nicely because any accumulated error was negligible; our long routes diverge because the poor 6502 is just trying to cope with the same math that this 64-thread POWER9 churns out effortlessly and more accurately. Since our simulation has a better-quality heuristic function, we get to the answer with less work in fewer cycles. Let's hear it for goal-directed pathfinding.
        <p>
        One last point on routing: you may have wondered how certain roads are struck so that the algorithm won't consider them. That turned out to be very simple; a snoop on the array range shows that it sets the selected segment, indicated by the cities on either end, to a mile length of 9,999 miles (altering <tt>B%(x,3)</tt>). That assures it will always have an insuperably high cost, yet be unlikely to overflow if it's involved in any calculations, and thus it will never be pulled from the open set for evaluation. The in-memory database is always reloaded from disk after the route is disposed of.
        <p>
        As our final stop in this article nearly as long as some of the drives we've analysed, we'll do my first 2005 long haul expedition along US Highway 395. This is a useful way to show how to add your own roads and what the program does with that, since not all of its segments are in the database.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi8Eh1b88tyW6-L9q0xBbGf4ZePxQuMjvuLJ3GbfERC_gkPFW0saVIgbDXxMz0Npw0S1GMQhIkXC5dQCMe3j_6mWpevF_rpj1oeOiYxdllujW2WkwWXDEFzwmnjmk9PZgGwem3AsKhD1Xl3e0NXfx86RSAgtqKCXjCPABOb86sLf3_7CLKiMVpONaSWjBE/s4153/395-merge.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" height="320" data-original-height="4153" data-original-width="2099" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi8Eh1b88tyW6-L9q0xBbGf4ZePxQuMjvuLJ3GbfERC_gkPFW0saVIgbDXxMz0Npw0S1GMQhIkXC5dQCMe3j_6mWpevF_rpj1oeOiYxdllujW2WkwWXDEFzwmnjmk9PZgGwem3AsKhD1Xl3e0NXfx86RSAgtqKCXjCPABOb86sLf3_7CLKiMVpONaSWjBE/s320/395-merge.png"/></a></div>
        
        US 395 (OpenStreetMap tiles used for this image) is well-known for traversing the California Eastern Sierra with access to Mammoth, Mono Lake and Death Valley, but actually extends much further all the way to British Columbia, via the eastern reaches of Oregon and Washington state and a small section in Nevada. Presently it is approximately 1,305 miles (2100km) long. It was established as a United States Numbered Highway in 1926 first as a small spur route from Spokane, Washington to the Canadian border, but in 1934 it was dramatically extended all the way to San Diego, California where it met the original alignment of US 101 downtown. Although US 395 never actually reached the Mexican border at any point, it was still called the Three Flags Highway for the three countries it ostensibly connected.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhZWPN3MVGRXqPjepdTE7iveCK4NaO2zIMPJxDuZvCi-rRxbA75sHHKYUb5AW8VLfNVnhsN3xdWc3o6TL-SLHW_0pKr5qkmmaJJxD6bJcdgWl9zK1lTg5EwMt6FpHJyXT8aC-rr2iTIj2f3hTD2n6LsSkrASPYxS2aQSY3XsYaND0aRcu3IjR_-LWHkv1I/s2048/00003.JPG" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhZWPN3MVGRXqPjepdTE7iveCK4NaO2zIMPJxDuZvCi-rRxbA75sHHKYUb5AW8VLfNVnhsN3xdWc3o6TL-SLHW_0pKr5qkmmaJJxD6bJcdgWl9zK1lTg5EwMt6FpHJyXT8aC-rr2iTIj2f3hTD2n6LsSkrASPYxS2aQSY3XsYaND0aRcu3IjR_-LWHkv1I/s320/00003.JPG"/></a></div>
        
        In 1969 the California Division of Highways truncated it to Hesperia, California, just south of Victorville, where it still terminates today at Interstate 15. (You saw this junction point on our map above.) The former freeway alignments today are mostly represented by I-15, I-215, I-15 (again) and CA 163, and a fair bit of its even earlier portions now bear Historic Route 395 signage. This particular sign is no longer up but I always liked the classic button copy appearance. US 395 is a special highway to me because my late father used it as a frequent jumping-off point for family vacation destinations, so it was a major part of my childhood and I always wanted to see the "end."
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjf58NfVhyphenhyphen6GoJ9aravBfvcQgj5IM7mzKnS2yk8Ft8Gd85ZNxvvICjgIyI6ErjwxrOGrASB6hhsmzuP_GU9tCg99Yz_o4HDRZWSisXmukiRLdhaB9VWpSZKT_idb2GZTI3YRBJtxldHRGhb4GuICtCML3tDFY3ngQbYkBd1a_pC-Je8DQKEeBnQrzDKJeM/s3840/IMG_5165.JPG" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="2160" data-original-width="3840" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjf58NfVhyphenhyphen6GoJ9aravBfvcQgj5IM7mzKnS2yk8Ft8Gd85ZNxvvICjgIyI6ErjwxrOGrASB6hhsmzuP_GU9tCg99Yz_o4HDRZWSisXmukiRLdhaB9VWpSZKT_idb2GZTI3YRBJtxldHRGhb4GuICtCML3tDFY3ngQbYkBd1a_pC-Je8DQKEeBnQrzDKJeM/s320/IMG_5165.JPG"/></a></div>
        
        Among the many sights include the Manzanar War Relocation Center where more than 120,000 Japanese-Americans were forcibly interred, a stain upon the history of the United States during World War II (this is the &#24944;&#38666;&#22612; Soul Consoling Tower cemetery monument built by stonemason Ryozo Kado in 1943),
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEihn9f6oMyr4jXOtbqQSFZevm1c3qRfGqx4lHKAuFovVb1HKVjgdXQbdRuTc1gxkMPfpfYeOCErViBqZrS0ZeECEygAkQq47f0tKryj7QmemFm0qkD3vDfS_pWoZOvheODIX8lF6bGyuv5h94iOU0V9q-PbJ8Th8_L4cBQTNMcrslNysPL-MmJK1fW48-E/s3840/IMG_5174.JPG" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="2160" data-original-width="3840" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEihn9f6oMyr4jXOtbqQSFZevm1c3qRfGqx4lHKAuFovVb1HKVjgdXQbdRuTc1gxkMPfpfYeOCErViBqZrS0ZeECEygAkQq47f0tKryj7QmemFm0qkD3vDfS_pWoZOvheODIX8lF6bGyuv5h94iOU0V9q-PbJ8Th8_L4cBQTNMcrslNysPL-MmJK1fW48-E/s320/IMG_5174.JPG"/></a></div>
        
        the alpine Convict Lake, 
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi15Se1qR3ZuKkbphEGP34fqy__Ts8Z1o6BYXY1gv8QuHoNF66CCx7xh0rgk-j7QZsF03eGFtCiHgdVFEHTJhrGMCuGRYsViko-ilodd-QWFWLIFDvj2W4CjAn0u2WMJ3vjH5RcUOiTe2sK4N81DlTIKizAllU7QQV7FqzKAkQr8sgixUXamtaelWtX7fc/s3840/IMG_5189.JPG" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="2160" data-original-width="3840" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi15Se1qR3ZuKkbphEGP34fqy__Ts8Z1o6BYXY1gv8QuHoNF66CCx7xh0rgk-j7QZsF03eGFtCiHgdVFEHTJhrGMCuGRYsViko-ilodd-QWFWLIFDvj2W4CjAn0u2WMJ3vjH5RcUOiTe2sK4N81DlTIKizAllU7QQV7FqzKAkQr8sgixUXamtaelWtX7fc/s320/IMG_5189.JPG"/></a></div>
        
        the otherworldly beaches and tufa spires of Mono Lake, along the shores of which US 395 passes directly,
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEivr-9342FQf78-5ncjbQPWOOXb4JzhxOaOq-9o7wYvzNC3m1CyiFRyN5EwW6zKNZ2OxrZwFME8qvXXKLQVJT4N4cGlkmChgohOzyV7sKkp3Rs44CmZGn5gSAMWbso_EWQnS_4_49RQFuKdUoxxO9SPDr31MG7pnpweStt-y5QlQTktL8HGZ453l6sZhyw/s2048/00941.JPG" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEivr-9342FQf78-5ncjbQPWOOXb4JzhxOaOq-9o7wYvzNC3m1CyiFRyN5EwW6zKNZ2OxrZwFME8qvXXKLQVJT4N4cGlkmChgohOzyV7sKkp3Rs44CmZGn5gSAMWbso_EWQnS_4_49RQFuKdUoxxO9SPDr31MG7pnpweStt-y5QlQTktL8HGZ453l6sZhyw/s320/00941.JPG"/></a></div>
        
        the 8,143' or so (2482m) Conway Summit overlook and the highest point along the highway in all three states, shown here in early spring when a lot of snow was still down,
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxfF3jhb3hQgQgrSmTynWJ0rQhfUFluziVb4MdFXEi050gHuLoXSot2D-FPO91BW6nNWDOPQtZwzSGztFKhwc0H0dLG1ORW2EWqrg6AVy2kdZRD_eeJ1uFuY5r_oR1B7ixG5ZumVM_OHFmLgyTFpHBW4jbbpus7l6UyuE5UtDtA1m1g_zZe7zL1LLHHyU/s2048/01555-0140.JPG" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxfF3jhb3hQgQgrSmTynWJ0rQhfUFluziVb4MdFXEi050gHuLoXSot2D-FPO91BW6nNWDOPQtZwzSGztFKhwc0H0dLG1ORW2EWqrg6AVy2kdZRD_eeJ1uFuY5r_oR1B7ixG5ZumVM_OHFmLgyTFpHBW4jbbpus7l6UyuE5UtDtA1m1g_zZe7zL1LLHHyU/s320/01555-0140.JPG"/></a></div>
        
        the famous Reno Arch along old US 395 on Virginia Street in its brief Nevada sojourn,
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiLAm-MVIUGvsn1NMshMk_qWx7G7JNLDm3kiH7NIZHffLmQNnj-YLLNwwWNWImGMeRcbFBt9lnIMm6Jlh3v_czEqfh5M9bVIRck7oTf_GGF8_jW1b4YMy2FdoJtEor5WJz2gsTV_YdaJZsHlrtuAyi33cXRDff6a6kNikFFmPlZMjEDm4hyphenhyphend6Z_Aq_fY5I/s2048/02490.JPG" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiLAm-MVIUGvsn1NMshMk_qWx7G7JNLDm3kiH7NIZHffLmQNnj-YLLNwwWNWImGMeRcbFBt9lnIMm6Jlh3v_czEqfh5M9bVIRck7oTf_GGF8_jW1b4YMy2FdoJtEor5WJz2gsTV_YdaJZsHlrtuAyi33cXRDff6a6kNikFFmPlZMjEDm4hyphenhyphend6Z_Aq_fY5I/s320/02490.JPG"/></a></div>
        
        the Abert Rim in Oregon and one of the highway's loneliest segments between Lakeview and Burns,
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiZRatj9brwtFIZZY-Q4bRx9FILhYO4tFzlkM2YExMSsDVm-DQcZCBDb4CawGQsGAeiNNdAr0WO8-X4uPjMUBZ-d6Z6y3efp8YFLtHsNqKKzropHpxgDHa1Y5PLCxsonau4pO0gY7pUgHBEaQKcU0j92YawllVcZ2fnw2gQWb4lqlMiM_C3IWgRx0n_Esg/s2048/04085.JPG" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiZRatj9brwtFIZZY-Q4bRx9FILhYO4tFzlkM2YExMSsDVm-DQcZCBDb4CawGQsGAeiNNdAr0WO8-X4uPjMUBZ-d6Z6y3efp8YFLtHsNqKKzropHpxgDHa1Y5PLCxsonau4pO0gY7pUgHBEaQKcU0j92YawllVcZ2fnw2gQWb4lqlMiM_C3IWgRx0n_Esg/s320/04085.JPG"/></a></div>
        
        the Monroe Street Bridge, its earliest alignment in Spokane, Washington (a freeway alignment is being constructed on the east end of town),
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhn8JM9flXRx1p5NWPRiT0dL0_18TfhFY9bS5ucUsuKCb54yAIYB6L4w-ucnb8nhlIhdpOXZa_SDEGHzE0rJgmtwxhPMTvVaiSrRSNeECMo9ncK0ah7CMWyHsBZcmxbpLP56O4VZqKzn6kGDT68s5FGB5R221DMSK88o3WMictvMJp0lvP_A9OMTfYhLdc/s2048/10040.JPG" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhn8JM9flXRx1p5NWPRiT0dL0_18TfhFY9bS5ucUsuKCb54yAIYB6L4w-ucnb8nhlIhdpOXZa_SDEGHzE0rJgmtwxhPMTvVaiSrRSNeECMo9ncK0ah7CMWyHsBZcmxbpLP56O4VZqKzn6kGDT68s5FGB5R221DMSK88o3WMictvMJp0lvP_A9OMTfYhLdc/s320/10040.JPG"/></a></div>
        
        and finally the very end of the end, the stub route BC 395 in Cascade, BC after US 395 officially terminates in Laurier, WA at the Canadian border, the only place where there is an "END" (or in this case, "ENDS"). Yes, these are all my pictures, collected over the years and several trips. Ask me before using them, please.
        <p>
        Unfortunately, the 1985 database won't get you there.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiVfzot-M5JQVtVPgnzS6P3BQ3uVSXdeLGX2Sg8_UqpGhYxPBuK_XmUpxLl66dTsupOoNUJN_h5xxYWpdnTPTXG7HUzAngHvj6k44yx5qXw1Of-AY98ezvcT875WQ4_6oc-ckH2LLq5UMA3sxCwDr9ZP0aK3UbqSpZxeRVgnJI1nfM0_sRD24dw96jLx1I/s1152/big-vice-screen-2025082021392254.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiVfzot-M5JQVtVPgnzS6P3BQ3uVSXdeLGX2Sg8_UqpGhYxPBuK_XmUpxLl66dTsupOoNUJN_h5xxYWpdnTPTXG7HUzAngHvj6k44yx5qXw1Of-AY98ezvcT875WQ4_6oc-ckH2LLq5UMA3sxCwDr9ZP0aK3UbqSpZxeRVgnJI1nfM0_sRD24dw96jLx1I/s320/big-vice-screen-2025082021392254.png"/></a></div>
        
        In the first place, it doesn't know where Laurier, WA (the small town at the Canadian border where it terminates) is. That place is here at the United States border crossing, as I photographed it in 2005:
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi9mq4nzecPyriGU7w00ssDJ5MhqzBy_xxMRCAJDm3qzb_eYI56mmYDqLig71PY_dnpIzTYMlwwxXnDBNcWwGMWUL2ycZRYmMWH6a6IBcKjxnDGwuxpJ6CngYlQZq3r7NmJkCpatYT0DJapJafKmNfvV9w3wHp19NLKMnnRX0T7rQGGF1MA37Dsuj8-fQE/s2048/04560.JPG" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi9mq4nzecPyriGU7w00ssDJ5MhqzBy_xxMRCAJDm3qzb_eYI56mmYDqLig71PY_dnpIzTYMlwwxXnDBNcWwGMWUL2ycZRYmMWH6a6IBcKjxnDGwuxpJ6CngYlQZq3r7NmJkCpatYT0DJapJafKmNfvV9w3wHp19NLKMnnRX0T7rQGGF1MA37Dsuj8-fQE/s320/04560.JPG"/></a></div>
        
        In the second place, it's missing other segments. For example, if we try to go to Spokane, Washington, which is directly served by US 395 and would have been the shortest route (even in 1985), ...
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEivYtWaXiDLw6xdJYRxMGARzPMnFNu9yHRIHIN_NBNs-XxXMu8OldnIVDXI6TsHftE0J-uLgrg5vaOwZWmFGLXsLttKl0q9ZMKvmlKEmNrl3_yxe32rXks-FVnng3Q9SZwkFo3CiaoSwOQUTc4Bb9QWEm-nOAwUY5g96p0D5OI72Xi9YtyS65k7QGcaK9E/s1152/big-vice-screen-2025082021415873.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEivYtWaXiDLw6xdJYRxMGARzPMnFNu9yHRIHIN_NBNs-XxXMu8OldnIVDXI6TsHftE0J-uLgrg5vaOwZWmFGLXsLttKl0q9ZMKvmlKEmNrl3_yxe32rXks-FVnng3Q9SZwkFo3CiaoSwOQUTc4Bb9QWEm-nOAwUY5g96p0D5OI72Xi9YtyS65k7QGcaK9E/s320/big-vice-screen-2025082021415873.png"/></a></div>
        
        ... it diverges off in Reno along I-80 and goes up through Idaho, backtracking on I-90 into Spokane. The reason for this is very simple: it doesn't know US 395 extends beyond Pendleton, Oregon, so the shortest route is east and it makes sense it wouldn't know about any of its other smaller destinations either.
        <p>
        Fortunately Roadsearch's author anticipated this. So, as our last stop on this great giant article, it's finally time to enter the editor.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjwpbfqW5Y5dpySNXFIeSIdMXHuBZnkBuIO2uMHOKh4Bh4BvsoarZK9Si-ITz6ZzqNbAtbBHdiryyPXs7hwOu9AaZGJLA-Mo0NDfeu7C79SoxQo6DW_4MTDgE1OuHvtj5ED3bfBPDm5EoOV-LYDC4ygTckiywTw7wRY6LEcmTO7kcUBOcSieHRyOK7kkNk/s1152/big-vice-screen-2025082022243475.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjwpbfqW5Y5dpySNXFIeSIdMXHuBZnkBuIO2uMHOKh4Bh4BvsoarZK9Si-ITz6ZzqNbAtbBHdiryyPXs7hwOu9AaZGJLA-Mo0NDfeu7C79SoxQo6DW_4MTDgE1OuHvtj5ED3bfBPDm5EoOV-LYDC4ygTckiywTw7wRY6LEcmTO7kcUBOcSieHRyOK7kkNk/s320/big-vice-screen-2025082022243475.png"/></a></div>
        
        The map editor ("Roadmap Development System") is accessed from the main menu and displays the maximum capacity available, which seems to be based on the maximum array size in memory. It might have been possible to expand it even further as the compiled BASIC text ends well short of $a000, something I may explore some other time.
        <p>
        I mentioned earlier about "resetting" the disk after the previous owners have used it. If you want to simply use the program for generating routes, and don't intend to add any additional cities or roads, it suffices to simply change the counts in <tt>M</tt>, which will then cause the program to ignore any extraneous ones. Style points are added if you clear the records in the RELative files and turn them into nulls, though this isn't required. For the 1985 release, set <tt>M</tt> to <tt>20 34 38 37 20 0D 20 37 37 35 20 0D 20 32 31 35 20 0D 20 39 39 39 39 20 0D</tt>, which is (in PETSCII) 487 cities, 775 road segments, 215 road names and serial number 9999 or as you like. (Note this will not change the serial number in the editor, but with this patch you're only using the main program in any case.)
        <p>
        However, if you try to use a disk modified this way to <em>add</em> routes or cities, it will correctly recognize the new ones as new but erroneously find their old links in the arrays. That will not only get you unexpected residual road links to any new cities, but the links' presence can also confuse the program to such an extent it will end up in an infinite loop. In this case you'll need to delete these hanging links by patching <tt>MATS</tt> to null out the entries in <tt>B%()</tt> and <tt>N%()</tt> referring to city numbers greater than 487 and road numbers greater than 215 (remember that there are three arrays in that file and that multi-dimensional arrays run out each dimension before going to the next, meaning you can't just truncate it and stuff nulls on the end). This is simple to understand in concept but a little tedious to do, so I have left this as an exercise for the reader. Should I come up with a clean <tt>MATS</tt> myself, I will put it up somewhere if there is interest; for now we'll do our work on a well-loved copy which means that the city numbers you see here may not necessarily be the ones you get if you're following along at home.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjs73jQXlg3sTFHFJ54Z0-LlIEypowcIfCKXSNf3d-hsLojV4tS-50bEPFOYiG_ymd7mF7mYGwRIA2AcCl1GAW9tbJlvv3zgl8w_Ih4uvrhdNajfxkPMtXJ13vAnQQZmDqKhEBB0xC1woajq0KRdFiYf7q2q2u8BusqXCzhYcqwUaCMWlroFXsTqeZR9SE/s3000/OVERLOOKING_THE_COLUMBIA_RIVER_AT_CORBETT,_NEAR_THE_CASCADE_LOCKS_ON_THE_LEWIS_AND_CLARK_TRAIL_-_NARA_-_548140.jpg" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="2038" data-original-width="3000" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjs73jQXlg3sTFHFJ54Z0-LlIEypowcIfCKXSNf3d-hsLojV4tS-50bEPFOYiG_ymd7mF7mYGwRIA2AcCl1GAW9tbJlvv3zgl8w_Ih4uvrhdNajfxkPMtXJ13vAnQQZmDqKhEBB0xC1woajq0KRdFiYf7q2q2u8BusqXCzhYcqwUaCMWlroFXsTqeZR9SE/s320/OVERLOOKING_THE_COLUMBIA_RIVER_AT_CORBETT,_NEAR_THE_CASCADE_LOCKS_ON_THE_LEWIS_AND_CLARK_TRAIL_-_NARA_-_548140.jpg"/></a></div>
        
        US 395 between Pendleton, Oregon and Pasco, Washington did not follow exactly the route in 1985 that it does today. Previously it went along what is now Oregon State Route 37 leaving Pendleton via Holdman to the banks of the Columbia River. It then traveled with US 730 to intersect US 410 (now US 12) west of Walla Walla, Washington at Wallula Junction, where US 730 terminated (and still does). US 395 continued with US 410/US 12 into Pasco and then went north from there to US 10 and later I-90 at Ritzville on its way to Spokane.
        <p>
        In 1975 Interstate 80N (renumbered to I-84 in 1980) was completed through northern Oregon along the routing of US 30, shown here in a 1973 archival photo from the U.S. National Archives and Records Administration, and US 395 was rerouted to it, diverging from the Interstate in Stanfield, Oregon.
          
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh-vUd6upii4QWTG4VrbdOzK9vHsGkMRwtfJGu6zOCHCphGdDDOFkQcWJQjN4eO88fiPwYtU9BJs-7nEGnZ7yq5qA6k4oOl_T6F4RxE1yt75Xha5vY_SR9sH9NH4opmWXCd4nOZHtOR7Si3gqxRFmOT-2wrEdmE4-2-Smtj6quruXiCJJK_JyU4xaNzOTA/s1610/VSImage_4.jpg" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" height="320" data-original-height="1610" data-original-width="1275" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh-vUd6upii4QWTG4VrbdOzK9vHsGkMRwtfJGu6zOCHCphGdDDOFkQcWJQjN4eO88fiPwYtU9BJs-7nEGnZ7yq5qA6k4oOl_T6F4RxE1yt75Xha5vY_SR9sH9NH4opmWXCd4nOZHtOR7Si3gqxRFmOT-2wrEdmE4-2-Smtj6quruXiCJJK_JyU4xaNzOTA/s320/VSImage_4.jpg"/></a></div>  
          
        From there it proceeded north to the Columbia River gorge and intersected US 730 further west, then went east with it as before to US 12. This intermediate state is shown on this 1976 Donnelley atlas page, with the relevant portion highlighted. It was not until around 1986-7 when Interstate 82 was completed that US 395 was moved to I-82 instead as its present-day routing, leaving only a tiny residual overlap with US 730 east of Umatilla, Oregon.
        <p>
        The problem is that none of these locations have waypoints we can easily connect to.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg-hiN01tmIrqy-NFswT9iM_d0d-OeAHqjwLK4N3Z3DQSw3WZbfqA8pwtLyV22qwrDRXridORPZ2bfLB1y7g-i95JzRLS1CzrMqF1jN5jgaU2ihS2wWUf4SD4tiRpsS45GcUAgp2N9si3AbYtXNA3_-4vNszTr_nFQizEw-kmzuGDG4c7x7rIpr2HCDGX8/s1152/big-vice-screen-2025082210050856.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg-hiN01tmIrqy-NFswT9iM_d0d-OeAHqjwLK4N3Z3DQSw3WZbfqA8pwtLyV22qwrDRXridORPZ2bfLB1y7g-i95JzRLS1CzrMqF1jN5jgaU2ihS2wWUf4SD4tiRpsS45GcUAgp2N9si3AbYtXNA3_-4vNszTr_nFQizEw-kmzuGDG4c7x7rIpr2HCDGX8/s320/big-vice-screen-2025082210050856.png"/></a></div>
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEipq2406BhLk-CNxQ9I865OhCASpzuObefXVdJeK2_bO42MD4uO4ItZAw7-7ZISYIWPRn8yM2ZiD8dN32cQ5OOg4mm8nCphekxu7-7_trIMYdAFbhjURfBtjQWqNhRpwe6MHmjkEpFNAuNraaV-O4qmv9iHJt8zuY6xc6ulgqVT0SnUn7znO1v4XsZmgSc/s1152/big-vice-screen-2025082210061227.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEipq2406BhLk-CNxQ9I865OhCASpzuObefXVdJeK2_bO42MD4uO4ItZAw7-7ZISYIWPRn8yM2ZiD8dN32cQ5OOg4mm8nCphekxu7-7_trIMYdAFbhjURfBtjQWqNhRpwe6MHmjkEpFNAuNraaV-O4qmv9iHJt8zuY6xc6ulgqVT0SnUn7znO1v4XsZmgSc/s320/big-vice-screen-2025082210061227.png"/></a></div>
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgvXNp8FCkA66B46Oo8yQeigltiaWNmLWkUC9qpoi65MDkQ5sGYiRflCE4orYHCqdz5k8nHABWUvCF0dzvK3Ik1rk_xkFjTbUM6tSrZIMbY1NFCIpyUc5jRgT16qLtVwfBERDGTeqx4AGk8XCH6ZwsmEn7ccvuzqOpgwd36p-balGZDErP6I2I6W9b0o-o/s1152/big-vice-screen-2025082210065606.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgvXNp8FCkA66B46Oo8yQeigltiaWNmLWkUC9qpoi65MDkQ5sGYiRflCE4orYHCqdz5k8nHABWUvCF0dzvK3Ik1rk_xkFjTbUM6tSrZIMbY1NFCIpyUc5jRgT16qLtVwfBERDGTeqx4AGk8XCH6ZwsmEn7ccvuzqOpgwd36p-balGZDErP6I2I6W9b0o-o/s320/big-vice-screen-2025082210065606.png"/></a></div>
        
        As you can see, I-84 and US 12 are "straight shots" in this region; only I-90 has an intermediate point, at Ellensburg, which isn't even close to where we come in.
        <p>
        So our strategy will be this: we'll split I-84 between Portland and Pendleton at Stanfield, I-90 between Ellensburg and Spokane at Ritzville, and US 12 at Wallula Junction and Pasco between Walla Walla and Yakima. We'll then add new US 395 segments between Stanfield and Power City, OR (where it meets US 730), Power City to Wallula Junction, Pasco to Ritzville, Spokane to Laurier and finally a tag of British Columbia Provincial Route 395 between the international border and the now uninhabited town of Cascade, where it terminates at the Crowsnest Highway between Christina Lake and Grand Forks, BC.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgA8FDTpVcqLVcMwkmfd3BZHI4G07RHJgd4wOs71kP2LaR6hq6kXNKBbsWOagLekj1MYhycLrYEvn8iIWC5UriNHxz67U1OIR2pZ961bAroDkVPve9UNLFoelI_1TAOarn7RlvIfsmvgsC7qRRWaYwYViAyj2eDvPSd29ICSCag3NakX02mD865n2yK3Bo/s1152/big-vice-screen-2025082210332653.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgA8FDTpVcqLVcMwkmfd3BZHI4G07RHJgd4wOs71kP2LaR6hq6kXNKBbsWOagLekj1MYhycLrYEvn8iIWC5UriNHxz67U1OIR2pZ961bAroDkVPve9UNLFoelI_1TAOarn7RlvIfsmvgsC7qRRWaYwYViAyj2eDvPSd29ICSCag3NakX02mD865n2yK3Bo/s320/big-vice-screen-2025082210332653.png"/></a></div>
        
        Although the editor has several search options for checking the presence of cities and roads and connections thereof, it has only one option for data entry, namely "Develop Roadmap." We start with an existing city in the database to hang new routings from.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhZw8YLdyAQiCS5D0gKqqgur8G8PtUr0eFUvAGvKsD5L15ZRQa63ILcATZhS0nOtVyJwY6x7HACDQYf2OjsjaQK2YG7WVrUKVmg1YlP8GzdCDwDZsTWBH46gDiI0NTM6k0-WWi0YuFyTz8Ougmg4pbCJQN_-OvrzO0BUMb6MwPzBMLF4olHzMzcO4dkrrA/s1152/big-vice-screen-2025082210335437.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhZw8YLdyAQiCS5D0gKqqgur8G8PtUr0eFUvAGvKsD5L15ZRQa63ILcATZhS0nOtVyJwY6x7HACDQYf2OjsjaQK2YG7WVrUKVmg1YlP8GzdCDwDZsTWBH46gDiI0NTM6k0-WWi0YuFyTz8Ougmg4pbCJQN_-OvrzO0BUMb6MwPzBMLF4olHzMzcO4dkrrA/s320/big-vice-screen-2025082210335437.png"/></a></div>
        
        We'll first start with Walla Walla (we could have started with Yakima but I just love typing Walla Walla). It has two links, US 12 to Yakima and then another along Oregon State Route 11 to, as it happens, Pendleton. (This is actually Washington State Route 125 when it crosses the border, but anyway.) There is a "break" option that would seem perfect for this but I found it was more straightforward to simply create a new chain of cities and then delete the old one &mdash; it only objects if you try to create a new US 12 alignment also to Yakima, which would be silly.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjWEwscCyYXmkp0t3bbRBLDaXWcvyJ3JSz2wKlYbjXG-ZDvz4NIGUnz4z0Bin6jtLUcocRUJtk7QzpAe5n2YemsKkCAKx-DEA3SgJ9uDXFGO5ic-X17-YpVUd7NYlGKuhuHvYRZehdTcxJASBPfmmMpzkiOh2orKA4godn_sNYVUkglM_PZ76RMZmUD27E/s1152/big-vice-screen-2025082210350138.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjWEwscCyYXmkp0t3bbRBLDaXWcvyJ3JSz2wKlYbjXG-ZDvz4NIGUnz4z0Bin6jtLUcocRUJtk7QzpAe5n2YemsKkCAKx-DEA3SgJ9uDXFGO5ic-X17-YpVUd7NYlGKuhuHvYRZehdTcxJASBPfmmMpzkiOh2orKA4godn_sNYVUkglM_PZ76RMZmUD27E/s320/big-vice-screen-2025082210350138.png"/></a></div>
        
        We go ahead and enter the road (US 12), the mileage (29) and the new city (Wallula Jct, which I'm using for consistency with the database names). Mileage is integer-only, so I fudged in Google Maps and made sure the totals matched the original edge we'll be replacing. It recognizes this is a new city, and asks if we meant to create it, which we do.
        <p>
        The roadgeeks still reading this will have asked why I didn't co-sign US 395 over US 12 (because it was), and the answer is we can't give any one edge more than one existing route name. We could conceivably create a US 395 link and a US 12 link completely parallel to each other going to the same places with the same mileage, but this strikes me as a dodgy kludge and I don't know how it would behave with routing. Alternatively, we could create a new road "US 12/US 395" just for that segment, but as US 12 seems to be the "primary" route here and it's less work overall, that's what we'll use.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh9akDjVY3DegzOXR6EYqkm80cUuIhAELSPwo8gCOz9hlunMgs8If791hjW-vfUK5Uq3yWulyrLZCF7skzZQ661ca68WozGS7R2iB6QsihnBMfDs31_e3yepApMwBhOz23M6BvrgmrtA0AEoIWQeSlkKBO0oYqI9NTXt5UeDKL1l09bvT8WC0kWVvsmDSM/s1152/big-vice-screen-2025082210353165.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh9akDjVY3DegzOXR6EYqkm80cUuIhAELSPwo8gCOz9hlunMgs8If791hjW-vfUK5Uq3yWulyrLZCF7skzZQ661ca68WozGS7R2iB6QsihnBMfDs31_e3yepApMwBhOz23M6BvrgmrtA0AEoIWQeSlkKBO0oYqI9NTXt5UeDKL1l09bvT8WC0kWVvsmDSM/s320/big-vice-screen-2025082210353165.png"/></a></div>
        
        Conveniently, the editor immediately moves to Wallula Junction. We then add the link to Pasco in the same way ...
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjkm9PxRh3T_jEb7Zp4ViOdcnv3Rd4KgKPcqbCn-SUj-fGzjCUHL2sTGcGWcGxd_8AwANHZBHgYhvZXZqixYZxyo-Sv7B9Nn3qQzgD_GtN0RY7Sx10zCaaMVsVsxAS1A6o-4E1b0i-8cZAo6oUZ6wqiR4_I28WLEjCrvupsXYnvqeGr92d-qJRRhfXPHUM/s1152/big-vice-screen-2025082210385167.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjkm9PxRh3T_jEb7Zp4ViOdcnv3Rd4KgKPcqbCn-SUj-fGzjCUHL2sTGcGWcGxd_8AwANHZBHgYhvZXZqixYZxyo-Sv7B9Nn3qQzgD_GtN0RY7Sx10zCaaMVsVsxAS1A6o-4E1b0i-8cZAo6oUZ6wqiR4_I28WLEjCrvupsXYnvqeGr92d-qJRRhfXPHUM/s320/big-vice-screen-2025082210385167.png"/></a></div>
        
        ... and then from Pasco to Yakima. This totals up to the original edge just in case anything was depending on that.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgNu9C3EL1PB2G-n2qRJnvpBOgoauesFsi14hhr8ZCNB2amCimA3rjiPu2-L8kdWNGjWTnrTGN_RkSz5A0zngZBTmeo5_8hPUTVYzd1wUWlsXSlM4AcRYtuOdHBQXVH_NIehAfRsXDtEavgqQuikTgAGxHwLkehFXLkdStjlRea1wRALqftkOYPhxUCbvE/s1152/big-vice-screen-2025082210395448.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgNu9C3EL1PB2G-n2qRJnvpBOgoauesFsi14hhr8ZCNB2amCimA3rjiPu2-L8kdWNGjWTnrTGN_RkSz5A0zngZBTmeo5_8hPUTVYzd1wUWlsXSlM4AcRYtuOdHBQXVH_NIehAfRsXDtEavgqQuikTgAGxHwLkehFXLkdStjlRea1wRALqftkOYPhxUCbvE/s320/big-vice-screen-2025082210395448.png"/></a></div>
        
        Now at Yakima, we delete the old single 132-mile route back to Walla Walla ...
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjyokCwbCPdHl8ICEZCPRjyS2KL26GuIPDjdPbszbEfKcyAvVhyphenhyphenGzhi0AV6TqwnYZ144XrsIESHLmtIE2YO_63xv-rFr3ehMXgfY390R6ECyEn6uipn1OZOrw8rpqLfBk1N9Ey18aOMG3pYbIZK2t-a8xTEMColG5sXx-39sJlnAd4-iBhOzh2l8RLNL64/s1152/big-vice-screen-2025082210412459.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjyokCwbCPdHl8ICEZCPRjyS2KL26GuIPDjdPbszbEfKcyAvVhyphenhyphenGzhi0AV6TqwnYZ144XrsIESHLmtIE2YO_63xv-rFr3ehMXgfY390R6ECyEn6uipn1OZOrw8rpqLfBk1N9Ey18aOMG3pYbIZK2t-a8xTEMColG5sXx-39sJlnAd4-iBhOzh2l8RLNL64/s320/big-vice-screen-2025082210412459.png"/></a></div>
        
        ... leaving only our new composite route. Let's exit the editor and have the routing algorithm test it out. When you press M for the menu, it actually just goes back to the city prompt, from which you simply press RETURN to return to the editor's main menu. Only then are your changes "live": the program, very wisely, seems to take some care in ensuring updates are atomic. While it will perform writes to the RELative files immediately, it keeps all other changes strictly in memory and will not save <tt>M</tt> or <tt>MATS</tt> to disk until this point so that if the process gets aborted in the middle, the database remains internally consistent except for some harmless unreferenced RELative file records that can be overwritten later.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj6ltR96uRB9eATG9ttdOUcL4ema6RJRpNo8ZEXRAsiCz8yyCFLd0amf6tyXcnMYTKouJzwzf_TwdD5ycoAyZyIfe6SMG0U-IFm-RhlLDWNJN3dbbqMfaCPMQPex3-ucLjZvZt1UOp7MDCH052hbdfVZxyDnMA8yNwoQYmA2w0P6NqcN6Q3G73VjD4A6jo/s1152/big-vice-screen-2025082210423183.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj6ltR96uRB9eATG9ttdOUcL4ema6RJRpNo8ZEXRAsiCz8yyCFLd0amf6tyXcnMYTKouJzwzf_TwdD5ycoAyZyIfe6SMG0U-IFm-RhlLDWNJN3dbbqMfaCPMQPex3-ucLjZvZt1UOp7MDCH052hbdfVZxyDnMA8yNwoQYmA2w0P6NqcN6Q3G73VjD4A6jo/s320/big-vice-screen-2025082210423183.png"/></a></div>
        
        From the main program, we run a check route from Yakima to Walla Walla, and it indeed uses the new alignments to connect them with the mileage we entered in the order we expected.
        <p>
        An interesting question: we know the A-star algorithm uses the encoded coordinates in <tt>N%()</tt> as its heuristic, but we were never asked for anything like latitude or longitude. How, then, can it get this information for the new cities we just created? At this point I dumped the RELative files and the new <tt>MATS</tt> to find out, and it so happens that the new city gets the same coordinates as the one it was connected to: both Wallula Junction and Walla Walla get coordinates 8062 and 20802, which are Walla Walla's coordinates. As we are connecting a couple new cities together along US 12, they also get the same coordinates, up to Yakima which retains its own. If we extended from both sides into the middle it would probably have made the database slightly more accurate at the cost of some inconvenient dancing around. This would be a good idea if you needed to reconstruct or chop up a particularly long segment, for example.
        <p>
        I had also made an earlier call-forward that cities added from the editor sometimes don't have columns 4 or 5 set to zero. I can see this for the entries the previous owner entered, but all of mine ended up zero, so I'm not sure under what conditions that occurred. It doesn't seem to matter to the program in any case.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiA0hFLHUHBKYpRGNDv_5oxezphAH6Gm9LYlf5LDFEdJvTgXksFtiwFLPgJHScm4mes3t6WdjNv4LxZk5odZm-DBlYIDFaM2IgVFXAStP0t6tNMON1QvC-SIFBc3wMiHvLoTJ73piGhEaNGd5exiXhXMSyfQs1F_ucKGydubPGNiIbEs35_UGUnKzXKhsQ/s1152/big-vice-screen-2025082212211471.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiA0hFLHUHBKYpRGNDv_5oxezphAH6Gm9LYlf5LDFEdJvTgXksFtiwFLPgJHScm4mes3t6WdjNv4LxZk5odZm-DBlYIDFaM2IgVFXAStP0t6tNMON1QvC-SIFBc3wMiHvLoTJ73piGhEaNGd5exiXhXMSyfQs1F_ucKGydubPGNiIbEs35_UGUnKzXKhsQ/s320/big-vice-screen-2025082212211471.png"/></a></div>
        
        We next do the same thing for I-90, adding Ritzville ...
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKqElsNbL0oCKgDD60soNRg49i54ZZ2m5VOsFOrb3r-59s1CfFKnjXKymcSD-Lcv7nd02SElFFPwilPmv-ioVu5YAjEsnPwN50jsdQ5Z0a0fwVIOPI1Sce_zsEUgSfCbGrwKGJ9urhoFGSmVlDXi93bGqCo5zVXcEVV5GAyZ_WrgDyjLNLGE489PsQK7w/s1152/big-vice-screen-2025082212323713.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKqElsNbL0oCKgDD60soNRg49i54ZZ2m5VOsFOrb3r-59s1CfFKnjXKymcSD-Lcv7nd02SElFFPwilPmv-ioVu5YAjEsnPwN50jsdQ5Z0a0fwVIOPI1Sce_zsEUgSfCbGrwKGJ9urhoFGSmVlDXi93bGqCo5zVXcEVV5GAyZ_WrgDyjLNLGE489PsQK7w/s320/big-vice-screen-2025082212323713.png"/></a></div>
        
        ... and I-84, adding Stanfield.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgQESc5bsCs9LKKWGhX12lddAyH8jQKrMxUpCf45athZM7GMwHr7Kyc3CnkOeeucKWom6-j3nNmKqRV3xKKZd5EFS7tqxo5EruPQX-eE1V-SMExsCqqHVXIKnxHUTrdUInCEOr2fPT6zxMkxI7lrvJFeGisDtSnxDJ-0HvIMZxThj7XwVinpTQPg9h7icM/s1152/big-vice-screen-2025082212384390.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgQESc5bsCs9LKKWGhX12lddAyH8jQKrMxUpCf45athZM7GMwHr7Kyc3CnkOeeucKWom6-j3nNmKqRV3xKKZd5EFS7tqxo5EruPQX-eE1V-SMExsCqqHVXIKnxHUTrdUInCEOr2fPT6zxMkxI7lrvJFeGisDtSnxDJ-0HvIMZxThj7XwVinpTQPg9h7icM/s320/big-vice-screen-2025082212384390.png"/></a></div>
        
        We have our junctions in place, so now let's hang the new alignments, starting with Stanfield to Power City ...
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhAlA5aCoP5HtutBj9KBa-fsKZMprSvp6MQgKn2LWQaCyhpKbhF49gdcS-c8qPdaL3ga-zVN8XWD_6lLy-r0A7og2YSoSwdnw4Fwxd_VoYWsszL4fZNd4_rdGp5xPHesupMO7akiSuUQcs6hkSdw4MZRvSeHUWgPuCN4fUR1-zC49vjgSC0o89FLhz6ZsU/s1152/big-vice-screen-2025082212390295.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhAlA5aCoP5HtutBj9KBa-fsKZMprSvp6MQgKn2LWQaCyhpKbhF49gdcS-c8qPdaL3ga-zVN8XWD_6lLy-r0A7og2YSoSwdnw4Fwxd_VoYWsszL4fZNd4_rdGp5xPHesupMO7akiSuUQcs6hkSdw4MZRvSeHUWgPuCN4fUR1-zC49vjgSC0o89FLhz6ZsU/s320/big-vice-screen-2025082212390295.png"/></a></div>
        
        ... and Power City to Wallula Junction ...
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgS3N4t4DsCDhxKIzPFbIiYnuMDBraw7uqxXGYiR__a2u8uvA1jlkCV1-Py5VdvrRSnMj_GH8kdugQcvBNLkZYtQ68L6lYARfygMVXgEfv3mnf00zSK00Z4jblWPTPtyz5m8IyHUGmDOGO5iAARYcVkL-I7XHrQksyVNpE_Uwakv8slp1znan5hyphenhyphenFOXle8/s1152/big-vice-screen-2025082212392215.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgS3N4t4DsCDhxKIzPFbIiYnuMDBraw7uqxXGYiR__a2u8uvA1jlkCV1-Py5VdvrRSnMj_GH8kdugQcvBNLkZYtQ68L6lYARfygMVXgEfv3mnf00zSK00Z4jblWPTPtyz5m8IyHUGmDOGO5iAARYcVkL-I7XHrQksyVNpE_Uwakv8slp1znan5hyphenhyphenFOXle8/s320/big-vice-screen-2025082212392215.png"/></a></div>
        
        ... showing all our new connections.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhpcmvz2Zva4q7OrWc-YDofNSSIdO7H5gxUKaItOYPsXRaYmGqj2cEEf9CKfMOQemn9ZBkmhGlENE13YF5OSqe1VIelNujrE_HHJKrVGnwZmXZtLQ8gn90X1bpgJ1BjWg_eFc_4Y3fQ_27alJZwbOV8OC6-povs5BnGjzC2uQUsDl_87XVskegRdvPCPrs/s1152/big-vice-screen-2025082212395638.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhpcmvz2Zva4q7OrWc-YDofNSSIdO7H5gxUKaItOYPsXRaYmGqj2cEEf9CKfMOQemn9ZBkmhGlENE13YF5OSqe1VIelNujrE_HHJKrVGnwZmXZtLQ8gn90X1bpgJ1BjWg_eFc_4Y3fQ_27alJZwbOV8OC6-povs5BnGjzC2uQUsDl_87XVskegRdvPCPrs/s320/big-vice-screen-2025082212395638.png"/></a></div>
        
        We then add in Ritzville ...
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEggZ_VYbci61zCYcqe5g3mhNpjMg3lX2_im7D9f70KLAUjvye6omVy9D5P6BXz8wQKGELEu67z0EoBvDEkwiJ34bz34DBl_4kPIKusmyAoegToINuyQ_s_jL_Ux9_Kd4kuhbhN6XKrWOhv8aiPb0ffnGeCyqVSQhQrzPaduZQrSELBh8fyRXgijbG9R1yU/s1152/big-vice-screen-2025082212403843.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEggZ_VYbci61zCYcqe5g3mhNpjMg3lX2_im7D9f70KLAUjvye6omVy9D5P6BXz8wQKGELEu67z0EoBvDEkwiJ34bz34DBl_4kPIKusmyAoegToINuyQ_s_jL_Ux9_Kd4kuhbhN6XKrWOhv8aiPb0ffnGeCyqVSQhQrzPaduZQrSELBh8fyRXgijbG9R1yU/s320/big-vice-screen-2025082212403843.png"/></a></div>
        
        ... Spokane to Laurier, another new "city,"
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgdruUeVNGksg170c6NfbHGY_oJeSIT1yEmDU_o6yseQbHiFeoy8PEa48DVrMZGLO4lLjxUrzNKQcHkZ8AM-qX1BmWWR2AacVVqHln4_iaKG6XkToqu2bvQ9y9CSYGlioNMY0P2IfatyT42r-ZVsYQbhOohixRFbCuuPWFMp1iA_qATEV-AP7QLC9ig92A/s1152/big-vice-screen-2025082212410961.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgdruUeVNGksg170c6NfbHGY_oJeSIT1yEmDU_o6yseQbHiFeoy8PEa48DVrMZGLO4lLjxUrzNKQcHkZ8AM-qX1BmWWR2AacVVqHln4_iaKG6XkToqu2bvQ9y9CSYGlioNMY0P2IfatyT42r-ZVsYQbhOohixRFbCuuPWFMp1iA_qATEV-AP7QLC9ig92A/s320/big-vice-screen-2025082212410961.png"/></a></div>
        
        ... and finally Laurier to Cascade along BC 395, which prompts us not only about the new city but also the new route number.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgKNJBph7jy3DMVHTXFSRgXmDMpNBQt-B7ZzNYFp-Yj0tlNoJyKNEu5foamKGTxpy_ntyY_llafJdOC_EL3-8yEekEJdr2SsaAvBAoG6zDrUIIJeuryqYkKlo8uI-pf_cr5fOMchTt4400XfAMDmzvv2S_fYsvI272ktj3E23qnPY2OmVWRFX5xHMVXe58/s1152/big-vice-screen-2025082212414655.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgKNJBph7jy3DMVHTXFSRgXmDMpNBQt-B7ZzNYFp-Yj0tlNoJyKNEu5foamKGTxpy_ntyY_llafJdOC_EL3-8yEekEJdr2SsaAvBAoG6zDrUIIJeuryqYkKlo8uI-pf_cr5fOMchTt4400XfAMDmzvv2S_fYsvI272ktj3E23qnPY2OmVWRFX5xHMVXe58/s320/big-vice-screen-2025082212414655.png"/></a></div>
        
        We're done.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgdx4iM-3_RB0rnI7Bo84sWL2Hk-2il1zHO9SUhjR-SVSTJdn5YbcWcM7nPnk4T6aznqeAfUfTXPe9W4l_tpMtGmjWWYIUZi14ysfccmSsvqVwFGoyQPfHySDEvltyDR_w8kM7kpLxPyJDs-kEYC-bB1Okb8fc2_pbUgk0tnDPSDg2WnJulqamqi2Ho_Hc/s1152/big-vice-screen-2025082212425560.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgdx4iM-3_RB0rnI7Bo84sWL2Hk-2il1zHO9SUhjR-SVSTJdn5YbcWcM7nPnk4T6aznqeAfUfTXPe9W4l_tpMtGmjWWYIUZi14ysfccmSsvqVwFGoyQPfHySDEvltyDR_w8kM7kpLxPyJDs-kEYC-bB1Okb8fc2_pbUgk0tnDPSDg2WnJulqamqi2Ho_Hc/s320/big-vice-screen-2025082212425560.png"/></a></div>
        
        Now, for the acid test: we'll go from its southern terminus near Hesperia (which in the database is "city" number 443) and all the way to Cascade, just as I would have driven it if I'd driven it 20 years before I did.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhzRFsyh8y6xz3QEC7LH7eXBO8a2y1w6E-8hlB2PKaJD_QSHo2iFkVQx-w5LERa1RoaopkI9pCg-gJIQImajCKtEqcFesWNu9UqRhMvjnd843ZCNSf3Wnz9997gzHjwz9AY3__AHdfF3yyyztA0GUtP4S1zkIGKjsss_5te9yT3PULbLyAdyRPPrEijU7g/s4080/PXL_20250822_211944773.jpg" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhzRFsyh8y6xz3QEC7LH7eXBO8a2y1w6E-8hlB2PKaJD_QSHo2iFkVQx-w5LERa1RoaopkI9pCg-gJIQImajCKtEqcFesWNu9UqRhMvjnd843ZCNSf3Wnz9997gzHjwz9AY3__AHdfF3yyyztA0GUtP4S1zkIGKjsss_5te9yT3PULbLyAdyRPPrEijU7g/s320/PXL_20250822_211944773.jpg"/></a></div>
        
        I also ran it on the roadwarrior SX-64 still sitting in my wife's passenger seat. Both the SX-64 and the emulated SuperCPU got the same distance, 1,323 miles, which would be roughly accurate for the time (the routing is longer than the more direct present-day routing along I-82, and in Nevada US 395 has also moved to the completed I-580 between Reno and Carson City which has reduced it by another few miles). Did it use the new roads? Is the heuristic still sufficiently accurate?
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhI_9VfV0xNL4MUhRVxTk4DFdsn3dnPoQYKXQOF06K3rxL4mW86P4hU1lTa9zz9hi85Lc3Dk2xDXlcN81Pa3_0DRJtyizE-jNpVEoxUIaex9bh30G0yAky7o0w885YqB589gX9pSdXtdGJS41Mm_z2MDD23fWd_hrHU9uku6oPrjMBqjor2r_DLQj9S1FE/s1152/big-vice-screen-2025082212442137.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhI_9VfV0xNL4MUhRVxTk4DFdsn3dnPoQYKXQOF06K3rxL4mW86P4hU1lTa9zz9hi85Lc3Dk2xDXlcN81Pa3_0DRJtyizE-jNpVEoxUIaex9bh30G0yAky7o0w885YqB589gX9pSdXtdGJS41Mm_z2MDD23fWd_hrHU9uku6oPrjMBqjor2r_DLQj9S1FE/s320/big-vice-screen-2025082212442137.png"/></a></div>
        
        So far so good &mdash; it doesn't deviate from Reno along I-80 now, so it obviously found the new shorter alignment.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEieY1Ln1kalF-Kk1jHfoDnE-VkFQZ24vAtQEvl9d3bFbGExcfQsD7eBAAj3UVEIYPyPNaipQhCMx-I3jCsPLgqLBby6I1qWf_MEBtmNg99dRbPwGBXX9CgmaKFkC8EnM_ZFRKUQuQupRVLH6JGpvEDIMEFaidIuJKsCGwoqm9fD7bnHJr-E2OLETH5jNkI/s1152/big-vice-screen-2025082212443883.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEieY1Ln1kalF-Kk1jHfoDnE-VkFQZ24vAtQEvl9d3bFbGExcfQsD7eBAAj3UVEIYPyPNaipQhCMx-I3jCsPLgqLBby6I1qWf_MEBtmNg99dRbPwGBXX9CgmaKFkC8EnM_ZFRKUQuQupRVLH6JGpvEDIMEFaidIuJKsCGwoqm9fD7bnHJr-E2OLETH5jNkI/s320/big-vice-screen-2025082212443883.png"/></a></div>
        
        It also walks along I-84 and US 12 as we intended it to ...
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgHyN10Pp3R9EZjmRMxjpz8-Ld-X4v7NxtZtS1UnEXVZPnAw0ZTeEAdEyrp9KDbYjmp-PywJcL21d8U0kCFxH5_7Ey60H9HDvMFkPAIBPdkG417PweKri9Kh_7ViJTlG-xE4zJ9wxtXWgFSwXxTTTINl1ScmTBt1s6-4QKVpreBpQYb6qccwpJeLoAGVcE/s1152/big-vice-screen-2025082212444883.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="988" data-original-width="1152" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgHyN10Pp3R9EZjmRMxjpz8-Ld-X4v7NxtZtS1UnEXVZPnAw0ZTeEAdEyrp9KDbYjmp-PywJcL21d8U0kCFxH5_7Ey60H9HDvMFkPAIBPdkG417PweKri9Kh_7ViJTlG-xE4zJ9wxtXWgFSwXxTTTINl1ScmTBt1s6-4QKVpreBpQYb6qccwpJeLoAGVcE/s320/big-vice-screen-2025082212444883.png"/></a></div>
        
        ... and gets all the way to British Columbia ...
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiET7GoEo1UZj0HLOB1u7zlTaHz4-sDojbUGUGKAZoZIkBCRtnGNUuH-WF6hUC_mEi3I1a_VLuAXhsMxceMXtHmwgs15WNkby9zGj_-xU7wu4OvNs0vsg3CFE8STaPVKgy2hRqTN3-1eXe6Nd9Wxic1GHY6AUi1CvXZaCoo9HF3vGNjXWUcNR3TvaLAq2M/s2048/19997.JPG" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiET7GoEo1UZj0HLOB1u7zlTaHz4-sDojbUGUGKAZoZIkBCRtnGNUuH-WF6hUC_mEi3I1a_VLuAXhsMxceMXtHmwgs15WNkby9zGj_-xU7wu4OvNs0vsg3CFE8STaPVKgy2hRqTN3-1eXe6Nd9Wxic1GHY6AUi1CvXZaCoo9HF3vGNjXWUcNR3TvaLAq2M/s320/19997.JPG"/></a></div>
        
        ... just like I did. Boy, I really needed a shave that day. A number of years ago I managed to acquire a real, retired BC 395 shield and it's still on our living room wall.
        <p>
        And this is the end of this article's journey too. The fact that the existing <tt>.d64</tt> disk images for this program all show new routes had been added suggests they got non-trivial usage by their owners, which really speaks to the strengths of the program and what it could accomplish. While it's hardly a sexy interface, it's functional and straightforward, and clearly a significant amount of time was spent getting the map data in and tuning up the routing algorithm so that it could perform decently on an entry-level home computer. Unfortunately, I suspect it didn't sell a lot of copies, because there are few advertisements for Columbia Software in any magazine of the time and no evidence that the Commodore version sold any better than the Apple II release did. That's a shame because I think its technical achievements merited a better market reception then, and it certainly deserves historical recognition today. We take things like Google Maps almost for granted, but a program that could drive a highway map on your 1985 Apple or Commodore would truly have been fascinating.
        
        <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEggeIYVkxZii2H7URy81mVYnl4S27XBsjTWJ0xLDRcxk8fXjqlgU1U1fzM1Qko0NOiZpEx8n2UypdefQtL4yFdB3TpwLp0M-ZRIPFyzP7y_bqzTAOHA3BMK2yspR5jKXEVL0isHqySkn8BC1dkGngOaItfF4dGjNE8IRHRGuCFidMVdF6IGmtlWuq3FBN8/s3360/Screenshot%202025-08-21%20at%205.57.38%E2%80%AFPM.png" style="display: block; padding: 1em 0; text-align: center; "><img alt="" border="0" width="320" data-original-height="2100" data-original-width="3360" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEggeIYVkxZii2H7URy81mVYnl4S27XBsjTWJ0xLDRcxk8fXjqlgU1U1fzM1Qko0NOiZpEx8n2UypdefQtL4yFdB3TpwLp0M-ZRIPFyzP7y_bqzTAOHA3BMK2yspR5jKXEVL0isHqySkn8BC1dkGngOaItfF4dGjNE8IRHRGuCFidMVdF6IGmtlWuq3FBN8/s320/Screenshot%202025-08-21%20at%205.57.38%E2%80%AFPM.png"/></a></div>
        
        As for me, I look forward to another long haul road trip in the future, maybe US 95 or US 101, or possibly reacquainting myself with US 6 which I drove in 2006 from Bishop to Cape Cod, Massachusetts. Regardless of where we end up going, though, we won't be taking the SX-64 with us &mdash; my wife has insisted on getting her seat back.]]>
      </description>
      <author>noreply@blogger.com (ClassicHasClass)</author>
      <guid>cid://tag:blogger.com,1999:blog-8349470052336612452.post-1289244460034935700</guid>
    </item>    <item>
      <title>b.log 2025/08/23 - Depressed..., Cooking stuff, A final bit of mowing, A new pasta shape, Lock screen.</title>
      <link>https://heyrick.eu/blog/entry/20250823</link>
      <description>
        <![CDATA[Depressed..., Cooking stuff, A final bit of mowing, A new pasta shape, Lock screen.]]>
      </description>
      <guid>cid://https://heyrick.eu/blog/entry/20250823</guid>
    </item>    <item>
      <title>Facebook, not now</title>
      <link>http://retro.hansotten.nl/facebook-not-now/</link>
      <description>
        <![CDATA[I am administrator of several Facebook groups. But not at the moment. So if you came here looking why I am absent on Facebook starting August 22, read this: I am well, my Facebook account is not. I am not a fan of Meta and the way they treat privacy, so I do not post [&#8230;]]]>
      </description>
      <guid>cid://http://retro.hansotten.nl/?p=18561</guid>
    </item>
  </channel>
</rss>
